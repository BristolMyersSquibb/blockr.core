[{"path":"https://bristolmyerssquibb.github.io/blockr.core/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr.core/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/blocks-registry.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"3. Browse for blocks","text":"registry environment provides access multiple blocks well metadata: block description. block category. block package. … words, registry “supermarket” data analysis. shown , develop blocks package registers blocks load, blocks become available end user. Therefore makes powerful collaboration data science teams.","code":"flowchart LR   subgraph blockr_ggplot2[blockr.ggplot2]     new_block1[New block]     new_block2[New block]   end   subgraph blockr_echarts4r[blockr.echarts4r]     new_block3[New block]     new_block4[New block]   end   blockr_ggplot2 --> |register| registry   blockr_echarts4r --> |register| registry   subgraph registry[Registry]     subgraph select_reg[Select block]       reg_name[Name: select block]       reg_descr[Description: select columns in a table]       reg_classes[Classes: select_block, tranform_block]       reg_category[Category: transform]       reg_ctor[Construcor: new_select_block]       reg_package[Package: blockr.dplyr]     end     subgraph filter_reg[Filter block]     end     filter_reg --x |unregister| trash['fa:fa-trash']   end"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/blocks-registry.html","id":"previewing-available-blocks","dir":"Articles","previous_headings":"","what":"Previewing available blocks","title":"3. Browse for blocks","text":"Upon loading, {blockr} registers internal blocks register_blockr_blocks(). won’t call function exported anyway. makes registry environment ready queried available_blocks(). truncated output example :","code":"available_blocks()[[\"dataset_block\"]] function(dataset = character(), package = \"datasets\", ...) {   ... } <environment: namespace:blockr.core> attr(,\"name\") [1] \"dataset block\" attr(,\"description\") [1] \"Choose a dataset from a package\" attr(,\"classes\") [1] \"dataset_block\" \"data_block\"    \"block\"         \"vctrs_vctr\"    \"list\"          attr(,\"category\") [1] \"data\" attr(,\"ctor_name\") [1] \"new_dataset_block\" attr(,\"package\") [1] \"blockr.core\" attr(,\"class\") [1] \"block_registry_entry\" names(available_blocks()) #>  [1] \"csv_block\"         \"dataset_block\"     \"filebrowser_block\" #>  [4] \"glue_block\"        \"head_block\"        \"merge_block\"       #>  [7] \"rbind_block\"       \"scatter_block\"     \"static_block\"      #> [10] \"subset_block\"      \"upload_block\""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/blocks-registry.html","id":"register-a-block","dir":"Articles","previous_headings":"","what":"Register a block","title":"3. Browse for blocks","text":"register blocks, user facing functions : register_block() register block registry. block already registered, overwrites existing one. register_blocks() register multiple blocks. Note , develop block outside package context, must call register_block (register_blocks) passing constructor function string (see ). Let’s say want create new new_dummy_block nothing specific ./R/dummy-block.R script: Finally, create .R/zzz.R script run code register block(s) whenever package loads: now query registry, new block available:","code":"# ./R/dummy-block.R new_dummy_block <- function(text = \"Hello World\", ...) {   new_data_block(     function(id) {       moduleServer(id, function(input, output, session) {         list(           expr = reactive(quote(text)),           state = list(text = text)         )       })     },     function(id) {       tagList()     },     class = \"dummy_block\",     ...   ) }  register_dummy_blocks <- function() {   register_blocks(     c(new_dummy_block),     name = c(\"dummy block\"),     description = c(\"A block that does nothing\"),     overwrite = TRUE   ) }  register_dummy_blocks() # ./R/zzz.R .onLoad <- function(libname, pkgname) {   register_dummy_blocks()   invisible(NULL) } available_blocks()[[\"dummy_block\"]] #> function (text = \"Hello World\", ...)  #> { #>     new_data_block(function(id) { #>         moduleServer(id, function(input, output, session) { #>             list(expr = reactive(quote(text)), state = list(text = text)) #>         }) #>     }, function(id) { #>         tagList() #>     }, class = \"dummy_block\", ...) #> } #> attr(,\"name\") #> [1] \"dummy block\" #> attr(,\"description\") #> [1] \"A block that does nothing\" #> attr(,\"classes\") #> [1] \"dummy_block\" \"data_block\"  \"block\"       \"vctrs_vctr\"  \"list\"        #> attr(,\"category\") #> [1] \"uncategorized\" #> attr(,\"class\") #> [1] \"block_registry_entry\""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/blocks-registry.html","id":"unregister-a-block","dir":"Articles","previous_headings":"","what":"Unregister a block","title":"3. Browse for blocks","text":"counterpart register_block() unregister_blocks(). can remove new dummy_block registry: uid /block(s) class(s) passed constructor.","code":"unregister_blocks(uid = \"dummy_block\")  # Check it out names(available_blocks()) #>  [1] \"csv_block\"         \"dataset_block\"     \"filebrowser_block\" #>  [4] \"glue_block\"        \"head_block\"        \"merge_block\"       #>  [7] \"rbind_block\"       \"scatter_block\"     \"static_block\"      #> [10] \"subset_block\"      \"upload_block\""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/blocks-registry.html","id":"create-your-own-registry-ui","dir":"Articles","previous_headings":"","what":"Create your own registry UI","title":"3. Browse for blocks","text":"Within blockr.core, registry used create dropdown possible blocks user wants add block: blockr.ui package, designed sophisticated UI registry. leverage scoutbaR package provides React-powered contextual menu search nicer metadata display. Block categories first extracted create widget sections scout_section() passing right label. Within section (ie block category) create one scout_action() per block. scout_action() display block icon better user experience, block name description. demo available , can click New block press cmd/ctrl + K trigger contextual menu. Note demo runs shinylive. feature may work expected due compatibility issues webR.","code":"selectInput(   ns(\"registry_select\"),   \"Select block from registry\",   choices = list_blocks() ) # pak::pak(\"scoutbaR\") library(scoutbaR) blk_icon <- function(category) {   switch(     category,     \"data\" = \"table\",     \"file\" = \"file-import\",     \"parse\" = \"cogs\",     \"plot\" = \"chart-line\",     \"transform\" = \"wand-magic-sparkles\",     \"table\" = \"table\"   ) }  blk_choices <- function() {   blk_cats <- sort(     unique(chr_ply(available_blocks(), \\(b) attr(b, \"category\")))   )    lapply(blk_cats, \\(cat) {     scout_section(       label = cat,       .list = dropNulls(         unname(           lapply(available_blocks(), \\(choice) {             if (attr(choice, \"category\") == cat) {               scout_action(                 id = attr(choice, \"classes\")[1],                 label = attr(choice, \"name\"),                 description = attr(choice, \"description\"),                 icon = blk_icon(cat)               )             }           })         )       )     )   }) }"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/create-block.html","id":"creating-blocks","dir":"Articles","previous_headings":"","what":"Creating blocks","title":"2. Create a block","text":"Note: already familiar Shiny modules, recommended familiarize continuing section. blockr.core built top Shiny. ’s heart, block nothing specialized Shiny module returns two additional values: expression (called “expr”), reactive expression defining blocks computation. allows R code exported data analyses recreated, outside blockr reactive context. state object (called “state”), list reactive values tracking user inputs. allows blocks separate user-defined state inputs specified blocks.     blocks return “expr” “state” values, blocks consist three elements: UI function define user interface. Server function handle reactive logic returns expression state object. Constructor function wraps UI server initialize block state. Now, let’s go element, building block template go. UI function blockr UI function Shiny module. means : UI function signature expected contain single id argument, can used shiny::NS() construct namespaced IDs. call appropriate shiny UI functions expected return shiny.tag shiny.tag.list objects, typically via use shiny::tagList() UI list separate UI elements. Let’s start build block template: inputs, server function takes id additional inputs blocks (e.g., data). example, blocks shipped blockr.core, result zero inputs data block, one transform block select block, two join block special argument ...args variadic blocks, rbind block.     server function return output moduleServer() call, defining: expr: quoted reactive expression representing block’s computation. Data names match expression top-level server function arguments. state: list reactive values tracking user selections. set returned values state match (count names) constructor signature. Many options exist build expressions, using tools offered rlang package passing string base::parse(). block developer free choose tools prefer, long evaluated expression returns non-reactive R code can executed outside blockr. state needed serialization deserialization respectively save restore state blockr application. constructor function wraps UI server functions initializes block. Note server ui closures therefore may refer names bound constructor scope (e.g. dataset choices). expose arguments anything user might set via UI control block state. words, inputs UI function, corresponding argument constructor function. hand, inputs blocks exposed arguments, dynamically provided server function. return value call new_block() (applicable call specific virtual constructors new_data_block(), new_transform_block(), etc.). can finish block template: ... forwarded new_block new_*_block. Putting together, can create utils::head() block, one offered new_head_block(): , state return value list length 1, containing current value constructor argument. current value n represented shiny::reactiveVal(), n_rows(), initialized values n constructor scope updated every change input$n. Furthermore max value shiny::numericInput() field updated every change number data rows. final block constructor argument note might dat_val, optional function can passed signals framework, data passed block, can actually processed block. app containing head block can spun example multiple data inputs, refer examples new_merge_block(). binary block (arguments x y) can explored standalone app (nonsensical inputs) data argument serve() expects list names components match server function signature, .e. data new_head_block() x, y new_merge_block(). names can chosen freely block implementer (exception integer-valued names, `1`, `2`, etc. reserved positional arguments ...args). example showed embed typical R function block. However, blockr.core can much . creating entire block around existing complex Shiny module? following, expose wrap block around esquisse, package build ggplot without coding. esquisse exports standalone modules can embed existing shiny app. Specifically, consider esquisse_server() esquisse_ui(). esquisse_server() needs rectangular data input returns list 3 elements: modified data, code plot filters code: filters applied esquisse, returned data filtered, otherwise module returns unchanged input data. Based already know constructing block, can write following code constructor server function. block 1 input materialized data parameter (data coming upstream block): server module, first call esquisse_server(). , technical part construct returned value. decide block stateless, case esquisse doesn’t handle starting module specific state, useless save something. expression composed 2 elements, data plot code. default, assume esquisse block transform_block, blockr.core uses block_output.transform_block display block output: S3 method can handle rectangular data list specified esquisse_block_server(). therefore create new class constructor esquisse block, call complex_block new_complex_block(), respectively: may notice, new_complex_block() similar new_transform_block, difference class name. subsequently define new S3 method block_output(), able process list result (don’t forget @export roxygen tag): also provide UI counter part. go fancy layout sake simplicity, design minimalistic UI: UI function constructor simple, even though totally free customize : Finally new esquisse block constructor given : test new block call: closing remark, since esquisse block stateless, save restore won’t work block. Note demo runs shinylive. feature may work expected due compatibility issues webR.","code":"flowchart LR   subgraph block[Block]     subgraph ctor[constructor]       block_ui[UI]       subgraph block_server[server]         blk_state[State]         blk_expr[Expression]       end     end   end ui <- function(id) {   tagList(     # Wrap widgets in `tagList()`     textInput(       NS(id, \"my_input\") # Use `shiny::NS()` to construct namespaces     )   ) } flowchart TB   data_blk[data block 1]   data_blk_2[data block 2]   data_blk_3[data block 3]   data_blk_4[data block 4]   select_blk[select block]   join_blk[join block]   rbind_blk[rbind block]   data_blk --> |data| select_blk   data_blk_2 -->|data1| join_blk   data_blk_3 --> |data2| join_blk    data_blk --> |1| rbind_blk   select_blk --> |2| rbind_blk   data_blk_4 --> |3| rbind_blk   join_blk --> |4| rbind_blk server <- function(id, data) {   moduleServer(id, function(input, output, session) {     # Reactive logic goes here      # Return a list with \"expr\" and \"state\"     list(       expr = reactive(quote(identity(data))),       state = list(         input_one = reactive(input_one()),         input_two = reactive(input_two())       )     )   }) } example_constructor <- function(ui_state = character(), ...) {   ui <- function(id) { #nolint     tagList(textInput(NS(id, \"ui_state\")))   }    server <- function(id, data) {     moduleServer(id, function(input, output, session) {       # Reactive logic goes here        # Return a list with \"expr\" and \"state\"       list(         expr = reactive(quote(identity(data))),         state = list(           # name must match what is defined in the constructor signature           ui_state = <STATE_VALUE>         )       )     })   }    # Return call to `new_block()`   new_block(     server = server,     ui = ui,     class = \"my_block\",     ...   ) } new_head_block <- function(n = 6L, ...) {   new_transform_block(     function(id, data) {       moduleServer(         id,         function(input, output, session) {           n_rows <- reactiveVal(n)            observeEvent(input$n, n_rows(input$n))            observeEvent(             nrow(data()),             updateNumericInput(               inputId = \"n\",               value = n_rows(),               min = 1L,               max = nrow(data())             )           )            list(             expr = reactive(               bquote(utils::head(data, n = .(n)), list(n = n_rows()))             ),             state = list(               n = n_rows             )           )         }       )     },     function(id) {       tagList(         numericInput(           inputId = NS(id, \"n\"),           label = \"Number of rows\",           value = n,           min = 1L         )       )     },     dat_val = function(data) {       stopifnot(is.data.frame(data) || is.matrix(data))     },     class = \"head_block\",     ...   ) } serve(new_head_block(n = 10L), list(data = mtcars)) serve(   new_merge_block(by = \"Time\"),   data = list(x = datasets::BOD, y = datasets::ChickWeight) ) results <- esquisse::esquisse_server(   id = \"esquisse\",   data_rv = data )  results$data results$code_filters results$code_plot esquisse_block_server <- function(id, data) {   moduleServer(     id,     function(input, output, session) {       results <- esquisse::esquisse_server(         id = \"esquisse\",         data_rv = data       )       list(         expr = reactive({           bquote(             list(               dat = as.data.frame(.(dat)),               filters = .(filters)             ),             list(               filters = results$code_plot,               dat = results$data             )           )         }),         state = list()       )     }   ) } block_output.transform_block <- function(x, result, session) {   session$output$result <- dt_result(result$dat, session) } new_complex_block <- function(server, ui, class, ctor = sys.parent(), ...) {   new_block(server, ui, c(class, \"complex_block\"), ctor, ...) } #' @export block_output.complex_block <- function(x, result, session) {   session$output$filters <- renderPrint(result$filters)   # result must come at the end of the output list if you have multiple outputs   session$output$result <- dt_result(result$dat, session) } #' @export block_ui.complex_block <- function(id, x, ...) {   tagList(     h1(\"Transformed data from {esquisse}\"),     DT::dataTableOutput(NS(id, \"result\")),     verbatimTextOutput(NS(id, \"filters\"))   ) } esquisse_block_ui <- function(id) {   tagList(     esquisse::esquisse_ui(       id = NS(id, \"esquisse\"),        header = FALSE # dont display gadget title     )   ) } new_esquisse_block <- function(...) {   new_complex_block(     server = esquisse_block_server,     ui = esquisse_block_ui,     class = \"esquisse_block\",     dat_valid = NULL,     allow_empty_state = TRUE,     ...   ) } serve(   new_board(     blocks = list(       a = new_dataset_block(iris),       b = new_esquisse_block()     ),     links = list(       new_link(\"a\", \"b\", \"data\")     )   ) )"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/create-block.html","id":"ui-function","dir":"Articles","previous_headings":"","what":"UI function","title":"2. Create a block","text":"UI function blockr UI function Shiny module. means : UI function signature expected contain single id argument, can used shiny::NS() construct namespaced IDs. call appropriate shiny UI functions expected return shiny.tag shiny.tag.list objects, typically via use shiny::tagList() UI list separate UI elements. Let’s start build block template:","code":"ui <- function(id) {   tagList(     # Wrap widgets in `tagList()`     textInput(       NS(id, \"my_input\") # Use `shiny::NS()` to construct namespaces     )   ) }"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/create-block.html","id":"server-function","dir":"Articles","previous_headings":"","what":"Server function","title":"2. Create a block","text":"inputs, server function takes id additional inputs blocks (e.g., data). example, blocks shipped blockr.core, result zero inputs data block, one transform block select block, two join block special argument ...args variadic blocks, rbind block.     server function return output moduleServer() call, defining: expr: quoted reactive expression representing block’s computation. Data names match expression top-level server function arguments. state: list reactive values tracking user selections. set returned values state match (count names) constructor signature. Many options exist build expressions, using tools offered rlang package passing string base::parse(). block developer free choose tools prefer, long evaluated expression returns non-reactive R code can executed outside blockr. state needed serialization deserialization respectively save restore state blockr application.","code":"flowchart TB   data_blk[data block 1]   data_blk_2[data block 2]   data_blk_3[data block 3]   data_blk_4[data block 4]   select_blk[select block]   join_blk[join block]   rbind_blk[rbind block]   data_blk --> |data| select_blk   data_blk_2 -->|data1| join_blk   data_blk_3 --> |data2| join_blk    data_blk --> |1| rbind_blk   select_blk --> |2| rbind_blk   data_blk_4 --> |3| rbind_blk   join_blk --> |4| rbind_blk server <- function(id, data) {   moduleServer(id, function(input, output, session) {     # Reactive logic goes here      # Return a list with \"expr\" and \"state\"     list(       expr = reactive(quote(identity(data))),       state = list(         input_one = reactive(input_one()),         input_two = reactive(input_two())       )     )   }) }"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/create-block.html","id":"constructor-function","dir":"Articles","previous_headings":"","what":"Constructor function","title":"2. Create a block","text":"constructor function wraps UI server functions initializes block. Note server ui closures therefore may refer names bound constructor scope (e.g. dataset choices). expose arguments anything user might set via UI control block state. words, inputs UI function, corresponding argument constructor function. hand, inputs blocks exposed arguments, dynamically provided server function. return value call new_block() (applicable call specific virtual constructors new_data_block(), new_transform_block(), etc.). can finish block template: ... forwarded new_block new_*_block.","code":"example_constructor <- function(ui_state = character(), ...) {   ui <- function(id) { #nolint     tagList(textInput(NS(id, \"ui_state\")))   }    server <- function(id, data) {     moduleServer(id, function(input, output, session) {       # Reactive logic goes here        # Return a list with \"expr\" and \"state\"       list(         expr = reactive(quote(identity(data))),         state = list(           # name must match what is defined in the constructor signature           ui_state = <STATE_VALUE>         )       )     })   }    # Return call to `new_block()`   new_block(     server = server,     ui = ui,     class = \"my_block\",     ...   ) }"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/create-block.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"2. Create a block","text":"Putting together, can create utils::head() block, one offered new_head_block(): , state return value list length 1, containing current value constructor argument. current value n represented shiny::reactiveVal(), n_rows(), initialized values n constructor scope updated every change input$n. Furthermore max value shiny::numericInput() field updated every change number data rows. final block constructor argument note might dat_val, optional function can passed signals framework, data passed block, can actually processed block. app containing head block can spun example multiple data inputs, refer examples new_merge_block(). binary block (arguments x y) can explored standalone app (nonsensical inputs) data argument serve() expects list names components match server function signature, .e. data new_head_block() x, y new_merge_block(). names can chosen freely block implementer (exception integer-valued names, `1`, `2`, etc. reserved positional arguments ...args).","code":"new_head_block <- function(n = 6L, ...) {   new_transform_block(     function(id, data) {       moduleServer(         id,         function(input, output, session) {           n_rows <- reactiveVal(n)            observeEvent(input$n, n_rows(input$n))            observeEvent(             nrow(data()),             updateNumericInput(               inputId = \"n\",               value = n_rows(),               min = 1L,               max = nrow(data())             )           )            list(             expr = reactive(               bquote(utils::head(data, n = .(n)), list(n = n_rows()))             ),             state = list(               n = n_rows             )           )         }       )     },     function(id) {       tagList(         numericInput(           inputId = NS(id, \"n\"),           label = \"Number of rows\",           value = n,           min = 1L         )       )     },     dat_val = function(data) {       stopifnot(is.data.frame(data) || is.matrix(data))     },     class = \"head_block\",     ...   ) } serve(new_head_block(n = 10L), list(data = mtcars)) serve(   new_merge_block(by = \"Time\"),   data = list(x = datasets::BOD, y = datasets::ChickWeight) )"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/create-block.html","id":"more-complex-examples","dir":"Articles","previous_headings":"","what":"More complex examples","title":"2. Create a block","text":"example showed embed typical R function block. However, blockr.core can much . creating entire block around existing complex Shiny module? following, expose wrap block around esquisse, package build ggplot without coding. esquisse exports standalone modules can embed existing shiny app. Specifically, consider esquisse_server() esquisse_ui(). esquisse_server() needs rectangular data input returns list 3 elements: modified data, code plot filters code: filters applied esquisse, returned data filtered, otherwise module returns unchanged input data. Based already know constructing block, can write following code constructor server function. block 1 input materialized data parameter (data coming upstream block): server module, first call esquisse_server(). , technical part construct returned value. decide block stateless, case esquisse doesn’t handle starting module specific state, useless save something. expression composed 2 elements, data plot code. default, assume esquisse block transform_block, blockr.core uses block_output.transform_block display block output: S3 method can handle rectangular data list specified esquisse_block_server(). therefore create new class constructor esquisse block, call complex_block new_complex_block(), respectively: may notice, new_complex_block() similar new_transform_block, difference class name. subsequently define new S3 method block_output(), able process list result (don’t forget @export roxygen tag): also provide UI counter part. go fancy layout sake simplicity, design minimalistic UI: UI function constructor simple, even though totally free customize : Finally new esquisse block constructor given : test new block call: closing remark, since esquisse block stateless, save restore won’t work block. Note demo runs shinylive. feature may work expected due compatibility issues webR.","code":"results <- esquisse::esquisse_server(   id = \"esquisse\",   data_rv = data )  results$data results$code_filters results$code_plot esquisse_block_server <- function(id, data) {   moduleServer(     id,     function(input, output, session) {       results <- esquisse::esquisse_server(         id = \"esquisse\",         data_rv = data       )       list(         expr = reactive({           bquote(             list(               dat = as.data.frame(.(dat)),               filters = .(filters)             ),             list(               filters = results$code_plot,               dat = results$data             )           )         }),         state = list()       )     }   ) } block_output.transform_block <- function(x, result, session) {   session$output$result <- dt_result(result$dat, session) } new_complex_block <- function(server, ui, class, ctor = sys.parent(), ...) {   new_block(server, ui, c(class, \"complex_block\"), ctor, ...) } #' @export block_output.complex_block <- function(x, result, session) {   session$output$filters <- renderPrint(result$filters)   # result must come at the end of the output list if you have multiple outputs   session$output$result <- dt_result(result$dat, session) } #' @export block_ui.complex_block <- function(id, x, ...) {   tagList(     h1(\"Transformed data from {esquisse}\"),     DT::dataTableOutput(NS(id, \"result\")),     verbatimTextOutput(NS(id, \"filters\"))   ) } esquisse_block_ui <- function(id) {   tagList(     esquisse::esquisse_ui(       id = NS(id, \"esquisse\"),        header = FALSE # dont display gadget title     )   ) } new_esquisse_block <- function(...) {   new_complex_block(     server = esquisse_block_server,     ui = esquisse_block_ui,     class = \"esquisse_block\",     dat_valid = NULL,     allow_empty_state = TRUE,     ...   ) } serve(   new_board(     blocks = list(       a = new_dataset_block(iris),       b = new_esquisse_block()     ),     links = list(       new_link(\"a\", \"b\", \"data\")     )   ) )"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/extend-blockr.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"4. Extend blockr","text":"Create block vignette, taught design new blocks blockr. know go much ? major blockr.core feature belongs plugin, materialized shiny module: Manage blocks (create/remove, append, …) Manage links, blocks connected. Linking block block B means block passes output data block B. Manage stacks (group blocks together). Preserve board state: save restore application state. … fully customizable , blockr.core provides reasonable defaults get started. blockr.ui example full customization.","code":"flowchart TD   subgraph board[board]     subgraph plugins[plugins]       subgraph manage_blocks[Manage blocks]       end       subgraph manage_links[Manage links]       end       subgraph manage_stacks[Manage stacks]       end       subgraph preserve_board[Preserve board]       end       subgraph generate_code[Generate code]       end       subgraph notify_user[Notify user]       end       subgraph edit_block[Edit block]       end       subgraph edit_stack[Edit stack]       end     end   end"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/extend-blockr.html","id":"blockr-plugins","dir":"Articles","previous_headings":"","what":"blockr plugins","title":"4. Extend blockr","text":"plugins used customize/enhance UX aspects board module, top level module exposed blockr.core. stated , couple plugins already available core, want create custom blockr app, can UI side: board_ui() expects namespace module, board object can create new_board. board , general, passed call serve board object can start app predefined blocks, links stacks. board_plugins() expect vector plugin names. important state moment, can overwrite existing plugins create new ones. server side, call board_server(), server counter part board_ui() expects namespace, board object subset () plugins. callbacks inject code directly board server function, opposed plugins nested submodules. parent used communicate application state parts application standardized way. Looking board_plugins.board() function: plugin composed server ui part, since modules. instance, manage_blocks plugin defined : following, want create custom manage_blocks plugin uses scoutbaR package, described vignette create custom manage blocks, ’ll first need overwrite add_rm_block_server add_rm_block_ui functions. sake simplicity, UI side, provide Add block button well scoutbar widget (blk_choices() described following vignette): server part, plugin always defined follows (documentation left reference): server function signature must start module id, board refers internal reactive values (read-), update reactive value send updates board module ... used recover parameters passed top level like parent. plugin always returns NULL. now want open scoutbaR widget whenever users clicks Add block button. can achieve calling update_scoutbar passing revealScoutbar = TRUE. Next step manage user choice, scoutbar action selected. listen input$scoutbar holds name selected block. Since string, call create_block(), instantiates block name, wrap as_blocks(). Finally, signal change board refreshing update reactive value, saying want add new block list(blocks = list(add = new_blk)): register new plugin, can defined custom board_plugins() function calls plugin manage_blocks(). sake simplicity, plugins omitted: example, may click Add block button see scoutbar opening select block. Note demo runs shinylive. feature may work expected due compatibility issues webR.","code":"main_ui <- function(id, board) {   ns <- NS(id)   board_ui(     ns(\"board\"),     board,     plugins = board_plugins(       board,       c(         \"preserve_board\",         \"manage_blocks\",         \"manage_links\",         \"manage_stacks\",         \"generate_code\",         \"notify_user\"       )     )   ) } main_server <- function(id, board) {   moduleServer(     id,     function(input, output, session) {       ns <- session$n        app_state <- reactiveValues(         # App state for module communication       )        # Board module       board_server(         \"board\",         board,         plugins = board_plugins(           board,           c(             \"preserve_board\",             \"manage_blocks\",             \"manage_links\",             \"manage_stacks\",             \"generate_code\",             \"notify_user\"           )         ),         callbacks = list(),         parent = app_state       )     }   ) } board_plugins.board <- function(x, which = NULL) {    plugins <- plugins(     preserve_board(),     manage_blocks(),     manage_links(),     manage_stacks(),     notify_user(),     generate_code(),     edit_block(),     edit_stack()   )    if (is.null(which)) {     return(plugins)   }    plugins[which] } manage_blocks <- function(server, ui) {   new_plugin(server, ui, validator = expect_null, class = \"manage_blocks\") } add_rm_block_ui <- function(id, board) {   tagList(     scoutbar(       NS(id, \"scoutbar\"),       placeholder = \"Search for a block\",       actions = blk_choices(),       theme = \"dark\",       showRecentSearch = TRUE     ),     actionButton(       NS(id, \"add_block\"),       \"New block\",       icon = icon(\"circle-plus\"),     )   ) } #' Add/remove block module #' #' Customizable logic for adding/removing blocks to the board. #' #' @param id Namespace ID #' @param board Reactive values object #' @param update Reactive value object to initiate board updates #' @param ... Extra arguments passed from parent scope #' #' @return A [shiny::reactiveValues()] object with components `add` and `rm`, #' where `add` may be `NULL` or a `block` object and `rm` be `NULL` or a string #' (block ID). #' #' @rdname add_rm_block #' @export add_rm_block_server <- function(id, board, update, ...) {   moduleServer(     id,     function(input, output, session) {       # SERVER LOGIC        NULL     }   ) } add_rm_block_server <- function(id, board, update, ...) {   moduleServer(     id,     function(input, output, session) {       # Trigger add block       observeEvent(         input$add_block,         {           update_scoutbar(             session,             \"scoutbar\",             revealScoutbar = TRUE           )         }       )        NULL     }   ) } add_rm_block_server <- function(id, board, update, ...) {   moduleServer(     id,     function(input, output, session) {       # Trigger add block       observeEvent(         input$add_block,         {           update_scoutbar(             session,             \"scoutbar\",             revealScoutbar = TRUE           )         }       )        observeEvent(input$scoutbar, {         new_blk <- as_blocks(create_block(input$scoutbar))         update(           list(blocks = list(add = new_blk))         )       })        NULL     }   ) } custom_board_plugins <- function(which = NULL) {   plugins <- plugins(     manage_blocks(server = add_rm_block_server, ui = add_rm_block_ui)   )    if (is.null(which)) {     return(plugins)   }    plugins[which] } main_ui <- function(id, board) {   ns <- NS(id)   board_ui(     ns(\"board\"),     board,     plugins = custom_board_plugins(       c(         \"manage_blocks\"       )     )   ) }  main_server <- function(id, board) {   moduleServer(     id,     function(input, output, session) {       ns <- session$n        # Board module       board_server(         \"board\",         board,         plugins = custom_board_plugins(           c(             \"manage_blocks\"           )         ),         callbacks = list()       )     }   ) }  board <- new_board()  ui <- page_fluid(   main_ui(\"app\", board) )  server <- function(input, output, session) {   main_server(\"app\", board) }  shinyApp(ui, server)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/extend-blockr.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"4. Extend blockr","text":"plugins used customize/enhance UX aspects board module, top level module exposed blockr.core. stated , couple plugins already available core, want create custom blockr app, can UI side: board_ui() expects namespace module, board object can create new_board. board , general, passed call serve board object can start app predefined blocks, links stacks. board_plugins() expect vector plugin names. important state moment, can overwrite existing plugins create new ones. server side, call board_server(), server counter part board_ui() expects namespace, board object subset () plugins. callbacks inject code directly board server function, opposed plugins nested submodules. parent used communicate application state parts application standardized way. Looking board_plugins.board() function: plugin composed server ui part, since modules. instance, manage_blocks plugin defined : following, want create custom manage_blocks plugin uses scoutbaR package, described vignette","code":"main_ui <- function(id, board) {   ns <- NS(id)   board_ui(     ns(\"board\"),     board,     plugins = board_plugins(       board,       c(         \"preserve_board\",         \"manage_blocks\",         \"manage_links\",         \"manage_stacks\",         \"generate_code\",         \"notify_user\"       )     )   ) } main_server <- function(id, board) {   moduleServer(     id,     function(input, output, session) {       ns <- session$n        app_state <- reactiveValues(         # App state for module communication       )        # Board module       board_server(         \"board\",         board,         plugins = board_plugins(           board,           c(             \"preserve_board\",             \"manage_blocks\",             \"manage_links\",             \"manage_stacks\",             \"generate_code\",             \"notify_user\"           )         ),         callbacks = list(),         parent = app_state       )     }   ) } board_plugins.board <- function(x, which = NULL) {    plugins <- plugins(     preserve_board(),     manage_blocks(),     manage_links(),     manage_stacks(),     notify_user(),     generate_code(),     edit_block(),     edit_stack()   )    if (is.null(which)) {     return(plugins)   }    plugins[which] } manage_blocks <- function(server, ui) {   new_plugin(server, ui, validator = expect_null, class = \"manage_blocks\") }"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/extend-blockr.html","id":"a-custom-manage_blocks","dir":"Articles","previous_headings":"","what":"A custom manage_blocks","title":"4. Extend blockr","text":"create custom manage blocks, ’ll first need overwrite add_rm_block_server add_rm_block_ui functions. sake simplicity, UI side, provide Add block button well scoutbar widget (blk_choices() described following vignette): server part, plugin always defined follows (documentation left reference): server function signature must start module id, board refers internal reactive values (read-), update reactive value send updates board module ... used recover parameters passed top level like parent. plugin always returns NULL. now want open scoutbaR widget whenever users clicks Add block button. can achieve calling update_scoutbar passing revealScoutbar = TRUE. Next step manage user choice, scoutbar action selected. listen input$scoutbar holds name selected block. Since string, call create_block(), instantiates block name, wrap as_blocks(). Finally, signal change board refreshing update reactive value, saying want add new block list(blocks = list(add = new_blk)):","code":"add_rm_block_ui <- function(id, board) {   tagList(     scoutbar(       NS(id, \"scoutbar\"),       placeholder = \"Search for a block\",       actions = blk_choices(),       theme = \"dark\",       showRecentSearch = TRUE     ),     actionButton(       NS(id, \"add_block\"),       \"New block\",       icon = icon(\"circle-plus\"),     )   ) } #' Add/remove block module #' #' Customizable logic for adding/removing blocks to the board. #' #' @param id Namespace ID #' @param board Reactive values object #' @param update Reactive value object to initiate board updates #' @param ... Extra arguments passed from parent scope #' #' @return A [shiny::reactiveValues()] object with components `add` and `rm`, #' where `add` may be `NULL` or a `block` object and `rm` be `NULL` or a string #' (block ID). #' #' @rdname add_rm_block #' @export add_rm_block_server <- function(id, board, update, ...) {   moduleServer(     id,     function(input, output, session) {       # SERVER LOGIC        NULL     }   ) } add_rm_block_server <- function(id, board, update, ...) {   moduleServer(     id,     function(input, output, session) {       # Trigger add block       observeEvent(         input$add_block,         {           update_scoutbar(             session,             \"scoutbar\",             revealScoutbar = TRUE           )         }       )        NULL     }   ) } add_rm_block_server <- function(id, board, update, ...) {   moduleServer(     id,     function(input, output, session) {       # Trigger add block       observeEvent(         input$add_block,         {           update_scoutbar(             session,             \"scoutbar\",             revealScoutbar = TRUE           )         }       )        observeEvent(input$scoutbar, {         new_blk <- as_blocks(create_block(input$scoutbar))         update(           list(blocks = list(add = new_blk))         )       })        NULL     }   ) }"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/extend-blockr.html","id":"register-plugins","dir":"Articles","previous_headings":"","what":"Register plugins","title":"4. Extend blockr","text":"register new plugin, can defined custom board_plugins() function calls plugin manage_blocks(). sake simplicity, plugins omitted:","code":"custom_board_plugins <- function(which = NULL) {   plugins <- plugins(     manage_blocks(server = add_rm_block_server, ui = add_rm_block_ui)   )    if (is.null(which)) {     return(plugins)   }    plugins[which] }"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/extend-blockr.html","id":"testing-the-new-plugin","dir":"Articles","previous_headings":"","what":"Testing the new plugin","title":"4. Extend blockr","text":"example, may click Add block button see scoutbar opening select block. Note demo runs shinylive. feature may work expected due compatibility issues webR.","code":"main_ui <- function(id, board) {   ns <- NS(id)   board_ui(     ns(\"board\"),     board,     plugins = custom_board_plugins(       c(         \"manage_blocks\"       )     )   ) }  main_server <- function(id, board) {   moduleServer(     id,     function(input, output, session) {       ns <- session$n        # Board module       board_server(         \"board\",         board,         plugins = custom_board_plugins(           c(             \"manage_blocks\"           )         ),         callbacks = list()       )     }   ) }  board <- new_board()  ui <- page_fluid(   main_ui(\"app\", board) )  server <- function(input, output, session) {   main_server(\"app\", board) }  shinyApp(ui, server)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/extend-blockr.html","id":"custom-ui-components","dir":"Articles","previous_headings":"","what":"Custom UI components","title":"4. Extend blockr","text":"’d like use board another UI kit bslib can create new method board_ui(). , ’ll need little bit S3 knowledge. function signature contain id (module namespace), x (board object), plugins use blockr.core plugins. following, leverage brand new shinyNextUI power custom board UI: customize block_ui . Overall, leverage shinyNextUI::card component create block layout: Notice use blockr.core helpers along way: board_blocks() extract validate blocks board. is_blocks() check whether object correspond list blocks. get_block_registry() get current block metadata registry. add_rm_block_ui() now leverages shinyNextUI::actionButton: Since blockr.core blocks utilizes shiny/bslib UI, ’d also rewrite UI /server part whenever necessary. vignette provides starting point authoring blocks. final step, call new_board() don’t forget add custom_board class custom S3 methods invoked. Note demo runs shinylive. feature may work expected due compatibility issues webR.","code":"board_ui.custom_board <- function(id, x, plugins = list(), ...) {   plugins <- as_plugins(plugins)   div(     id = paste0(id, \"_board\"),     board_ui(id, plugins[[\"manage_blocks\"]], x),     div(       id =  paste0(id, \"_blocks\"),       block_ui(id, x)     )   ) } get_block_registry <- function(x) {   stopifnot(is_block(x))   available_blocks()[[strsplit(attr(x, \"ctor\"), \"new_\")[[1]][2]]] }  block_ui.custom_board <- function(id, x, blocks = NULL, ...) {   block_card <- function(x, id, ns) {     id <- paste0(\"block_\", id)      blk_info <- get_block_registry(x)      div(       class = \"m-2\",       id = ns(id),       shinyNextUI::card(         variant = \"bordered\",         shinyNextUI::card_header(           className = \"d-flex justify-content-between\",           icon(blk_icon(attr(blk_info, \"category\"))),           sprintf(             \"Block: %s (id: %s)\",             attr(blk_info, \"name\"),             gsub(\"block_\", \"\", id)           ),           shinyNextUI::tooltip(             icon(\"info-circle\"),             content = tagList(               p(               icon(\"lightbulb\"),               \"How to use this block?\",               ),               p(attr(blk_info, \"description\"), \".\")             )           )         ),         shinyNextUI::divider(),         shinyNextUI::card_body(           expr_ui(ns(id), x),           block_ui(ns(id), x)         ),         shinyNextUI::divider(),         shinyNextUI::card_footer(           sprintf(             \"Type: %s; Package: %s\",             attr(blk_info, \"category\"),             attr(blk_info, \"package\")           )         )       )     )   }    stopifnot(is.character(id) && length(id) == 1L)    if (is.null(blocks)) {     blocks <- board_blocks(x)   } else if (is.character(blocks)) {     blocks <- board_blocks(x)[blocks]   }    stopifnot(is_blocks(blocks))    tagList(     Map(       block_card,       blocks,       names(blocks),       MoreArgs = list(ns = NS(id)),       USE.NAMES = FALSE     )   ) } add_rm_block_ui <- function(id, board) {   tagList(     scoutbar(       NS(id, \"scoutbar\"),       placeholder = \"Search for a block\",       actions = blk_choices(),       theme = \"dark\",       showRecentSearch = TRUE     ),     shinyNextUI::actionButton(       NS(id, \"add_block\"),       \"New block\",       icon = icon(\"circle-plus\"),     )   ) } board <- new_board(class = \"custom_board\")  ui <- nextui_page(   board_ui(     \"board\",     board,     plugins = custom_board_plugins(       c(         \"manage_blocks\"       )     )   )  )  server <- function(input, output, session) {   board_server(     \"board\",     board,     plugins = custom_board_plugins(       c(         \"manage_blocks\"       )     ),     callbacks = list()   ) }  shinyApp(ui, server)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/extend-blockr.html","id":"customize-board-options","dir":"Articles","previous_headings":"","what":"Customize board options","title":"4. Extend blockr","text":"TBD","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/get-started.html","id":"blockr-for-non-coders","dir":"Articles","previous_headings":"","what":"{blockr} for non coders","title":"1. Getting started","text":"case, likely just want get started create first data pipeline. , isn’t promise blockr framework? Leveraging default blockr.core UI displayed , let’s see easily can set first data pipeline. Open Shinylive top navigation bar, click Add block. Select dataset_block give data custom id. Click ok. block represented card containing block name, output data parameter icon top right side. latter may used remove block, change name append (add ) new block. block can contain inputs. case, can change output data. Click Add block add new Select block, giving transform custom id. Notice error message red. can also see none select block field can changed. basically means data fed block. Let’s change . top navbar, click Edit links. opens modal window. Click Add select data dropdown, transform data Input. creates link data block select block. Click ok. select block, can now select Chick column. new table displayed . Notice done much faster way. Click select block top right option icon remove block. dataset block, click Append block select Select block. link, connection, automatically created . now means change dataset block propagates select block. Select Chick column. can try change data back BOD see error message Block transform: select columns exist. ✖ Column 'Chick' exist.. enjoy first round? Let’s meet next steps. analysis grows, may convenient group blocks functions. can achieved stacks. previous analysis Click Edit stacks (top navbar), click Add select blocks add click ok. Blocks now part collapsible unit (accordion) convenience. Want share reproduce analysis? Click Show code copy paste produce code. Wouldn’t nice save work? anytime may click Save. restart app, click Restore select previously saved file (snapshot). Note won’t work documentation website due limitations shinylive. may notice top right side navbar. option icon also available entire application level. moment, can change table options like number pages, number previewed data, toggle search. blockr.ui exposes fully customized user experience built top block.core. none solution meet needs, keep mind blockr.core entirely customizable, means can talk developer team get new app.","code":"serve(   new_board() )"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/get-started.html","id":"the-user-interface","dir":"Articles","previous_headings":"","what":"The user interface","title":"1. Getting started","text":"Leveraging default blockr.core UI displayed , let’s see easily can set first data pipeline. Open Shinylive top navigation bar, click Add block. Select dataset_block give data custom id. Click ok. block represented card containing block name, output data parameter icon top right side. latter may used remove block, change name append (add ) new block. block can contain inputs. case, can change output data. Click Add block add new Select block, giving transform custom id. Notice error message red. can also see none select block field can changed. basically means data fed block. Let’s change . top navbar, click Edit links. opens modal window. Click Add select data dropdown, transform data Input. creates link data block select block. Click ok. select block, can now select Chick column. new table displayed . Notice done much faster way. Click select block top right option icon remove block. dataset block, click Append block select Select block. link, connection, automatically created . now means change dataset block propagates select block. Select Chick column. can try change data back BOD see error message Block transform: select columns exist. ✖ Column 'Chick' exist.. enjoy first round? Let’s meet next steps.","code":"serve(   new_board() )"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/get-started.html","id":"group-nodes","dir":"Articles","previous_headings":"","what":"Group nodes","title":"1. Getting started","text":"analysis grows, may convenient group blocks functions. can achieved stacks. previous analysis Click Edit stacks (top navbar), click Add select blocks add click ok. Blocks now part collapsible unit (accordion) convenience.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/get-started.html","id":"code-export","dir":"Articles","previous_headings":"","what":"Code export","title":"1. Getting started","text":"Want share reproduce analysis? Click Show code copy paste produce code.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/get-started.html","id":"save-and-restore-your-work","dir":"Articles","previous_headings":"","what":"Save and restore your work","title":"1. Getting started","text":"Wouldn’t nice save work? anytime may click Save. restart app, click Restore select previously saved file (snapshot). Note won’t work documentation website due limitations shinylive.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/get-started.html","id":"other-options","dir":"Articles","previous_headings":"","what":"Other options","title":"1. Getting started","text":"may notice top right side navbar. option icon also available entire application level. moment, can change table options like number pages, number previewed data, toggle search.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/get-started.html","id":"more-sophisticated-uis","dir":"Articles","previous_headings":"","what":"More sophisticated UIs","title":"1. Getting started","text":"blockr.ui exposes fully customized user experience built top block.core. none solution meet needs, keep mind blockr.core entirely customizable, means can talk developer team get new app.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/get-started.html","id":"blockr-for-developers","dir":"Articles","previous_headings":"","what":"{blockr} for developers","title":"1. Getting started","text":"developer may serve blockr applications develop custom blocks. provide introduction . blockr.core decomposes entire data pipeline workflows smaller units called block, responsible performing single task. end day, obtain DAG create powerful data workflows.     top level, blockr app made board object. board may contains blocks, stacks group blocks, connections blocks, also known links. may find interesting read block metadata vignette. mostly available testing, can serve block entire application. need spin app single block: block requires input, additionally pass static data: Notice example, data named list x y. name list given signature corresponding block server function (see truncated example new_merge_block()): case, want serve entire board. single line code spins ready--use blockr board. cases, possible initialize board blocks, stacks links: Open Shinylive can deploy application hosting solution like Posit Connect, Shiny server even shinylive like example. serve() assumes board top level shiny app module structure. hood, serve() returns shinyapp object. may need embed board larger app, also possible. two entry points may look serve.board method reference: board_ui(): board UI module. board_server(): board server module. develop custom blocks, can read vignette. wish customize look feel block, look article.","code":"flowchart TD   subgraph board[Board]      subgraph stack1[Stack 1]       direction TB       import[Data 1]       transform[Transform]       visualize[Visualize]       import2[Data 2]       merge[Merge data]       transform2[Subset columns]       import --> transform --> |filter| merge --> |left join| visualize       import2 --> transform2 --> |subset| merge     end      subgraph stack2[Stack 2]       direction TB       import3[Data 3]       llm[Transform LLM]       visualise_llm[Visualize LLM]       import3 --> llm --> visualise_llm     end   end serve(new_dataset_block(\"iris\")) serve(   new_merge_block(by = \"name\"),   data = list(x = datasets::BOD, y = datasets::ChickWeight) ) new_merge_block <- function(by = character(), all_x = FALSE, all_y = FALSE, ...) {    new_transform_block(     server = function(id, x, y) {       moduleServer(         id,         function(input, output, session) {           # ... server logic ...         })     }) } serve(new_board()) serve(   new_board(     blocks = c(       a = new_dataset_block(\"BOD\"),       b = new_dataset_block(\"ChickWeight\"),       c = new_merge_block(\"Time\")     ),     links = c(       ac = new_link(\"a\", \"c\", \"x\"),       bc = new_link(\"b\", \"c\", \"y\")     ),     stacks = list(ac = c(\"a\", \"c\"))   ) ) ui <- bslib::page_fluid(   board_ui(id, x, plugins) ) server <- function(input, output, session) {   res <- board_server(id, x, plugins) } shinyApp(ui, server)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/get-started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"1. Getting started","text":"blockr.core decomposes entire data pipeline workflows smaller units called block, responsible performing single task. end day, obtain DAG create powerful data workflows.     top level, blockr app made board object. board may contains blocks, stacks group blocks, connections blocks, also known links. may find interesting read block metadata vignette.","code":"flowchart TD   subgraph board[Board]      subgraph stack1[Stack 1]       direction TB       import[Data 1]       transform[Transform]       visualize[Visualize]       import2[Data 2]       merge[Merge data]       transform2[Subset columns]       import --> transform --> |filter| merge --> |left join| visualize       import2 --> transform2 --> |subset| merge     end      subgraph stack2[Stack 2]       direction TB       import3[Data 3]       llm[Transform LLM]       visualise_llm[Visualize LLM]       import3 --> llm --> visualise_llm     end   end"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/get-started.html","id":"serve-blocks","dir":"Articles","previous_headings":"","what":"Serve blocks","title":"1. Getting started","text":"mostly available testing, can serve block entire application. need spin app single block: block requires input, additionally pass static data: Notice example, data named list x y. name list given signature corresponding block server function (see truncated example new_merge_block()):","code":"serve(new_dataset_block(\"iris\")) serve(   new_merge_block(by = \"name\"),   data = list(x = datasets::BOD, y = datasets::ChickWeight) ) new_merge_block <- function(by = character(), all_x = FALSE, all_y = FALSE, ...) {    new_transform_block(     server = function(id, x, y) {       moduleServer(         id,         function(input, output, session) {           # ... server logic ...         })     }) }"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/get-started.html","id":"serve-a-board","dir":"Articles","previous_headings":"","what":"Serve a board","title":"1. Getting started","text":"case, want serve entire board. single line code spins ready--use blockr board. cases, possible initialize board blocks, stacks links: Open Shinylive can deploy application hosting solution like Posit Connect, Shiny server even shinylive like example.","code":"serve(new_board()) serve(   new_board(     blocks = c(       a = new_dataset_block(\"BOD\"),       b = new_dataset_block(\"ChickWeight\"),       c = new_merge_block(\"Time\")     ),     links = c(       ac = new_link(\"a\", \"c\", \"x\"),       bc = new_link(\"b\", \"c\", \"y\")     ),     stacks = list(ac = c(\"a\", \"c\"))   ) )"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/get-started.html","id":"use-the-board-as-a-module","dir":"Articles","previous_headings":"","what":"Use the board as a module","title":"1. Getting started","text":"serve() assumes board top level shiny app module structure. hood, serve() returns shinyapp object. may need embed board larger app, also possible. two entry points may look serve.board method reference: board_ui(): board UI module. board_server(): board server module.","code":"ui <- bslib::page_fluid(   board_ui(id, x, plugins) ) server <- function(input, output, session) {   res <- board_server(id, x, plugins) } shinyApp(ui, server)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/get-started.html","id":"whats-next","dir":"Articles","previous_headings":"","what":"What’s next?","title":"1. Getting started","text":"develop custom blocks, can read vignette. wish customize look feel block, look article.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/get-started.html","id":"develop-new-blocks","dir":"Articles","previous_headings":"","what":"Develop new blocks","title":"1. Getting started","text":"develop custom blocks, can read vignette.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/get-started.html","id":"extend-blockr-core","dir":"Articles","previous_headings":"","what":"Extend blockr.core","title":"1. Getting started","text":"wish customize look feel block, look article.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/testing-blocks.html","id":"common-test-cases","dir":"Articles","previous_headings":"","what":"Common test cases","title":"5. Testing blocks","text":"interacting block, often good idea test block constructor worked intended created correct class object. example, let’s create pretend “test_block” class: Next, may want test input widgets block work intended. , changes inputs reflected changes reactive values block. example, let’s imagine test block input widget allows user select color: confirming input widgets work expected, may want check “state” block returned correctly. Let’s expand previous example add second input widget, number, allows user select numeric value. access state returned block indexing session$returned object returned shiny::testServer(): addition checking “state” returned block, can also check “expr” correctly evaluated. evaluate expressions, can call base::eval() returned expression, check evaluated expressions matches expression. example, let’s assume input widgets combine expression build new “colored_number” class just prints colored number screen: may also want test errors correctly thrown incorrect expressions: likely blocks require data blocks passed arguments block. test suite, can pass objects list args object testServer(). instance, let’s assume test block requires data.frame passed argument “df”:","code":"test_that(\"block constructor\", {     expect_s3_class(new_test_block(), \"test_block\") }) test_that(\"test block server input widgets update reactive values\", {     testServer(         app = new_test_block()$expr_server, # Capture the expression server         expr = {             session$setInputs(color = \"green\") # Set a color             expect_equal(color(), \"green\")              session$setInputs(color = \"red\") # Change color             expect_equal(color(), \"red\")         }     ) }) test_that(\"state is correctly returned\", {     testServer(         app = new_test_block()$expr_server,         expr = {             # First check default values             expect_equal(session$returned$state$number(), numeric())             expect_equal(session$returned$state$color(), character())              # Then toggle the inputs and recheck state is updated correctly             session$setInputs(number = 1)             expect_equal(session$returned$state$number(), 1)             session$setInputs(color = \"pink\")             expect_equal(session$returned$state$color(), \"pink\")         }     ) }) test_that(\"expr evaluates correctly\", {     testServer(         app = new_test_block()$expr_server,         expr = {             session$setInputs(number = 1)             session$setInputs(color = \"cyan\")              # Call `base::eval()` on our expression             evaluated_expr <- eval(session$returned$expr())             expect_s3_class(evaluated_expr, \"colored_number\")         }     ) }) test_that(\"incorrect colours throw an error\", {     testServer(         app = new_test_block()$expr_server,         expr = {             session$setInputs(number = 2)              # Set invalid colour             session$setInputs(color = \"Ooops\")              # Check that an error is thrown             expect_error(eval(session$returned$expr()))         }     ) }) test_that(\"test block server input widgets update reactive values\", {     testServer(         app = new_test_block()$expr_server,         # Set block arguments with the \"args\" argument         args = list(df = reactive(gt::gt(mtcars))),         expr = {             session$setInputs(color = \"green\")             expect_equal(color(), \"green\")         }     ) })"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/testing-blocks.html","id":"test-class-of-object","dir":"Articles","previous_headings":"","what":"Test class of object","title":"5. Testing blocks","text":"interacting block, often good idea test block constructor worked intended created correct class object. example, let’s create pretend “test_block” class:","code":"test_that(\"block constructor\", {     expect_s3_class(new_test_block(), \"test_block\") })"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/testing-blocks.html","id":"test-input-widgets-work","dir":"Articles","previous_headings":"","what":"Test input widgets work","title":"5. Testing blocks","text":"Next, may want test input widgets block work intended. , changes inputs reflected changes reactive values block. example, let’s imagine test block input widget allows user select color:","code":"test_that(\"test block server input widgets update reactive values\", {     testServer(         app = new_test_block()$expr_server, # Capture the expression server         expr = {             session$setInputs(color = \"green\") # Set a color             expect_equal(color(), \"green\")              session$setInputs(color = \"red\") # Change color             expect_equal(color(), \"red\")         }     ) })"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/testing-blocks.html","id":"test-that-state-is-correctly-returned","dir":"Articles","previous_headings":"","what":"Test that state is correctly returned","title":"5. Testing blocks","text":"confirming input widgets work expected, may want check “state” block returned correctly. Let’s expand previous example add second input widget, number, allows user select numeric value. access state returned block indexing session$returned object returned shiny::testServer():","code":"test_that(\"state is correctly returned\", {     testServer(         app = new_test_block()$expr_server,         expr = {             # First check default values             expect_equal(session$returned$state$number(), numeric())             expect_equal(session$returned$state$color(), character())              # Then toggle the inputs and recheck state is updated correctly             session$setInputs(number = 1)             expect_equal(session$returned$state$number(), 1)             session$setInputs(color = \"pink\")             expect_equal(session$returned$state$color(), \"pink\")         }     ) })"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/testing-blocks.html","id":"test-that-expressions-are-correctly-returned","dir":"Articles","previous_headings":"","what":"Test that expressions are correctly returned","title":"5. Testing blocks","text":"addition checking “state” returned block, can also check “expr” correctly evaluated. evaluate expressions, can call base::eval() returned expression, check evaluated expressions matches expression. example, let’s assume input widgets combine expression build new “colored_number” class just prints colored number screen:","code":"test_that(\"expr evaluates correctly\", {     testServer(         app = new_test_block()$expr_server,         expr = {             session$setInputs(number = 1)             session$setInputs(color = \"cyan\")              # Call `base::eval()` on our expression             evaluated_expr <- eval(session$returned$expr())             expect_s3_class(evaluated_expr, \"colored_number\")         }     ) })"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/testing-blocks.html","id":"test-that-expressions-correctly-throw-errors","dir":"Articles","previous_headings":"","what":"Test that expressions correctly throw errors","title":"5. Testing blocks","text":"may also want test errors correctly thrown incorrect expressions:","code":"test_that(\"incorrect colours throw an error\", {     testServer(         app = new_test_block()$expr_server,         expr = {             session$setInputs(number = 2)              # Set invalid colour             session$setInputs(color = \"Ooops\")              # Check that an error is thrown             expect_error(eval(session$returned$expr()))         }     ) })"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/articles/testing-blocks.html","id":"passing-additional-args","dir":"Articles","previous_headings":"","what":"Passing additional args","title":"5. Testing blocks","text":"likely blocks require data blocks passed arguments block. test suite, can pass objects list args object testServer(). instance, let’s assume test block requires data.frame passed argument “df”:","code":"test_that(\"test block server input widgets update reactive values\", {     testServer(         app = new_test_block()$expr_server,         # Set block arguments with the \"args\" argument         args = list(df = reactive(gt::gt(mtcars))),         expr = {             session$setInputs(color = \"green\")             expect_equal(color(), \"green\")         }     ) })"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicolas Bennett. Author, maintainer. David Granjon. Author. Christoph Sax. Author. Karma Tarap. Contributor. John Coene. Contributor. Bristol Myers Squibb. Funder.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bennett N, Granjon D, Sax C (2025). blockr.core: Graphical Web-Framework Data Manipulation Visualization. R package version 0.1.1, https://bristolmyerssquibb.github.io/blockr.core/.","code":"@Manual{,   title = {blockr.core: Graphical Web-Framework for Data Manipulation and Visualization},   author = {Nicolas Bennett and David Granjon and Christoph Sax},   year = {2025},   note = {R package version 0.1.1},   url = {https://bristolmyerssquibb.github.io/blockr.core/}, }"},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr.core/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Graphical Web-Framework for Data Manipulation and Visualization","text":"blockr framework data analysis, using web-based point click user interface. Use blockr create web apps perform visual programming, leveraging power R.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Graphical Web-Framework for Data Manipulation and Visualization","text":"can install development version blockr.core GitHub :","code":"pak::pak(\"BristolMyersSquibb/blockr.core\")"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/index.html","id":"what-is-blockrcore","dir":"","previous_headings":"","what":"What is blockr.core?","title":"Graphical Web-Framework for Data Manipulation and Visualization","text":"blockr.core entry point blockr, providing core functionality needed get started. can run stand-alone app, designed extensibility mind. rich API provided connect blocks override default behaviors (e.g., can add GUI layer serialization).","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/index.html","id":"what-is-a-block","dir":"","previous_headings":"","what":"What is a block?","title":"Graphical Web-Framework for Data Manipulation and Visualization","text":"block fundamental unit data analysis workflow. single block performs single task, loading filtering visualization. Blocks can joined together using DAG (direct acyclic graph) create powerful data workflows.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/index.html","id":"who-is-it-for","dir":"","previous_headings":"","what":"Who is it for?","title":"Graphical Web-Framework for Data Manipulation and Visualization","text":"blockr targets two main user groups: non developers empowered create insightful data workflows using pre-built blocks can easily connected, without writing single line code. developers provided set tools create new blocks extend blockr, thereby enhancing entire framework fostering collaboration within teams organisations.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key features","title":"Graphical Web-Framework for Data Manipulation and Visualization","text":"User-Friendly Interface: Build data pipelines intuitive interface, like blockr.ui. Flexibility: Easily add, remove, rearrange blocks pipeline. Extensibility: Developers can create custom blocks extend functionality (blockr.dplyr, blockr.ai, blockr.io, blockr.sdtm, …) Reproducibility: Pipelines created blockr.core easily shareable reproducible, exportable code. Interactivity: Real-time feedback build modify pipeline. blockr.ui example","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Graphical Web-Framework for Data Manipulation and Visualization","text":"get started, invite read vignette.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/index.html","id":"extending-blockr","dir":"","previous_headings":"","what":"Extending blockr","title":"Graphical Web-Framework for Data Manipulation and Visualization","text":"started build blockr extensions enrich blockr.core’s capabilities: blockr.dplyr: entry point dplyr ecosystem. blockr.ai: LLM-powered blocks. blockr.io: handle different data input format (xpt, csv, …) output export. blockr.sdtm: pharmaverse datasets blocks. wish learn develop blocks, look vignette.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/assertions.html","id":null,"dir":"Reference","previous_headings":"","what":"Assertions — is_scalar","title":"Assertions — is_scalar","text":"Utility functions, mainly intended asserting common preconditions exported convenience dependent packages.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/assertions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assertions — is_scalar","text":"","code":"is_scalar(x)  is_string(x)  is_bool(x)  is_intish(x)  is_count(x, allow_zero = TRUE)  is_number(x)  not_null(...)  has_length(x)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/assertions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assertions — is_scalar","text":"x Object check allow_zero Determines whether value 0 considered valid count ... Silently ignored","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/assertions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assertions — is_scalar","text":"Scalar logical value.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/block_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Block utilities — block_name","title":"Block utilities — block_name","text":"Several utilities working (manipulating) block objects exported developers encouraged use instead relying object implementation extract modify attributes. functionality working blocks lacking, please consider opening issue.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/block_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block utilities — block_name","text":"","code":"block_name(x)  block_name(x) <- value  validate_data_inputs(x, data)  block_inputs(x)  block_arity(x)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/block_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block utilities — block_name","text":"x object inheriting \"block\" value New value data Data input values","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/block_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Block utilities — block_name","text":"Return types vary among set exported utilities: block_name(): string valued block name, block_name<-(): x (invisibly), validate_data_inputs(): NULL validator set result validator function otherwise, block_inputs(): (possibly empty) character vector data input names, block_arity(): scalar integer NA case variadic behavior.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/block_name.html","id":"block-name","dir":"Reference","previous_headings":"","what":"Block name","title":"Block utilities — block_name","text":"block can name (default constructed class vector) intended users easily identify different blocks. name can freely changed lifetime block uniqueness restrictions place. current block name can retrieved block_name() set block_name(x) <- \"name\".","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/block_name.html","id":"input-validation","dir":"Reference","previous_headings":"","what":"Input validation","title":"Block utilities — block_name","text":"Data input validation available via validate_data_inputs() uses (optional) validator function passed new_block() construction time. mechanism can used prevent premature evaluation block expression might lead unexpected errors.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/block_name.html","id":"block-arity-inputs","dir":"Reference","previous_headings":"","what":"Block arity/inputs","title":"Block utilities — block_name","text":"set explicit (named) data inputs block available block_inputs(), block arity can queried block_arity(). case variadic blocks (.e. blocks take variable number inputs like example block providing base::rbind()-like functionality), block_arity() returns NA special block server function argument ...args, signalling variadic behavior stripped block_inputs().","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/block_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Block utilities — block_name","text":"","code":"blk <- new_dataset_block() block_name(blk) #> [1] \"Dataset block\" block_name(blk) <- \"My dataset block\" block_name(blk) #> [1] \"My dataset block\"  block_inputs(new_dataset_block()) #> character(0) block_arity(new_dataset_block()) #> [1] 0  block_inputs(new_merge_block()) #> [1] \"x\" \"y\" block_arity(new_merge_block()) #> [1] 2  block_inputs(new_rbind_block()) #> character(0) block_arity(new_rbind_block()) #> [1] NA"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/block_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Block server — block_server","title":"Block server — block_server","text":"block represented several (nested) shiny modules top level module created using block_server() generic. S3 dispatch offered way add flexibility, cases default method block class suffice top level. entry points customization offered generics expr_server() block_eval(), responsible initializing block \"expression\" module (.e. block server function passed new_block()) block evaluation (evaluating interpolated expression context input data), respectively.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/block_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block server — block_server","text":"","code":"block_server(id, x, data = list(), ...)  # S3 method for class 'block' block_server(   id,   x,   data = list(),   block_id = id,   edit_block = NULL,   board = reactiveValues(),   update = reactiveVal(),   ... )  expr_server(x, data, ...)  block_eval(x, expr, data, ...)  block_eval_trigger(x, session = get_session())  block_render_trigger(x, session = get_session())"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/block_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block server — block_server","text":"id Namespace ID x Object generate shiny::moduleServer() data Input data (list reactives) ... Generic consistency block_id Block ID edit_block Block edit plugin board Reactive values object containing board information update Reactive value object initiate board updates expr Quoted expression evaluate context data session Shiny session object","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/block_server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Block server — block_server","text":"block_server() expr_server() return shiny server module (.e. call shiny::moduleServer()), block_eval() evaluates interpolated (w.r.t. block \"user\" inputs) block expression context block data inputs.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/block_server.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Block server — block_server","text":"module returned block_server(), least default implementation, provides much essential block-type agnostic functionality, including data input validation (available), instantiation block expression server (handling block-specific functionality, .e. block user inputs expression), instantiation edit_block module (passed parent scope). block considered ready evaluation whenever input data available satisfies validation (validate_data_inputs()) nonempty state values available (unless otherwise instructed via allow_empty_state new_block()). Conditions raised validation evaluation caught returned order surfaced app user. Block-level user inputs (provided expression module) separated output, behavior can customized via block_output() generic. block_ui() generic can used control rendering outputs.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/block_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Block UI — block_ui","title":"Block UI — block_ui","text":"UI associated block created via generics expr_ui() block_ui(). former mainly responsible user inputs specific every block type (.e. subset_block requires different user inputs compared head_block, see new_transform_block()) essentially calls UI function passed ui new_block(). UI represents block outputs typically shared among similar block types (.e. blocks shared inheritance structure, subset_block head_block, inherit transform_block). type UI us created block_ui() block inheritance used deduplicate shared functionality (.e. implementing method transform_block class instead separate methods subset_block head_block. Working tandem block_ui(), generic block_output() generates output displayed UI portion defined via block_ui().","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/block_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block UI — block_ui","text":"","code":"block_ui(id, x, ...)  expr_ui(id, x, ...)  block_output(x, result, session)  # S3 method for class 'board' block_ui(id, x, blocks = NULL, edit_ui = NULL, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/block_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block UI — block_ui","text":"id Namespace ID x Object generate UI container ... Generic consistency result Block result session Shiny session object blocks (Additional) blocks (IDs) generate UI edit_ui Block edit plugin","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/block_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Block UI — block_ui","text":"expr_ui() block_ui() expected return shiny UI (e.g. objects wrapped shiny::tagList()). rendering UI, block_output() required return result shiny render function. example, transform block might show resulting data.frame HTML table using DT package. corresponding block_ui() function contain UI created DT::dataTableOutput() rendering block_output() handled DT::renderDT().","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/block_ui.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Block UI — block_ui","text":"result block_output(), evaluated block_server() context assigned output$result. Consequently, referencing block result block_ui(), naming convention followed referring something like shiny::NS(id, \"result\").","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/block_ui.html","id":"board-level-block-ui","dir":"Reference","previous_headings":"","what":"Board-level block UI","title":"Block UI — block_ui","text":"contents block-level UI created dispatching block_ui() blocks another dispatch board (see new_board()) occurs well. can used control blocks integrated board UI. default board, uses bslib::card() represent blocks. boards extend default board class, control available blocks displayed providing board-specific block_ui() method.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/blockr_abort.html","id":null,"dir":"Reference","previous_headings":"","what":"Blockr conditions — blockr_abort","title":"Blockr conditions — blockr_abort","text":"Wrappers rlang::abort(), rlang::warn() rlang::inform(). addition class, conditions inherit \"blockr_error\".","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/blockr_abort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Blockr conditions — blockr_abort","text":"","code":"blockr_abort(..., class = character(), envir = parent.frame())  blockr_warn(..., class = character(), envir = parent.frame())  blockr_inform(..., class = character(), envir = parent.frame())"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/blockr_abort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Blockr conditions — blockr_abort","text":"... Forwarded cli::pluralize class Condition class envir Forwarded cli::pluralize","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/blockr_abort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Blockr conditions — blockr_abort","text":"Called side-effect signaling conditions.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/blockr_option.html","id":null,"dir":"Reference","previous_headings":"","what":"Blockr Options — blockr_option","title":"Blockr Options — blockr_option","text":"Retrieves options via base::getOption() base::Sys.getenv(), order, prefixes option name passed name blockr. blockr_ respectively. Additionally, name converted lower case getOption() upper case environment variables. case value available given name, default returned.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/blockr_option.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Blockr Options — blockr_option","text":"","code":"blockr_option(name, default)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/blockr_option.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Blockr Options — blockr_option","text":"name Option name default Default value","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/blockr_option.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Blockr Options — blockr_option","text":"value set option name default set. case option available environment variable, value string available base::options() entry may R type.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/blockr_option.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Blockr Options — blockr_option","text":"","code":"blockr_option(\"test-example\", \"default\") #> [1] \"default\"  options(`blockr.test-example` = \"non-default\") blockr_option(\"test-example\", \"default\") #> [1] \"non-default\"  Sys.setenv(`BLOCKR_TEST-EXAMPLE` = \"another value\") tryCatch(   blockr_option(\"test-example\", \"default\"),   error = function(e) conditionMessage(e) ) #> [1] \"Conflicting options set for test-example: check environment variable BLOCKR_TEST-EXAMPLE and option blockr.test-example.\" options(`blockr.test-example` = NULL) blockr_option(\"test-example\", \"default\") #> [1] \"another value\"  Sys.unsetenv(\"BLOCKR_TEST-EXAMPLE\") blockr_option(\"test-example\", \"default\") #> [1] \"default\""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/blockr_ser.html","id":null,"dir":"Reference","previous_headings":"","what":"Serialization utilities — blockr_ser","title":"Serialization utilities — blockr_ser","text":"Blocks serialized writing information constructor used create object, combining block state information, constitutes values passed constructor original object can re-created.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/blockr_ser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serialization utilities — blockr_ser","text":"","code":"blockr_ser(x, ...)  # S3 method for class 'block' blockr_ser(x, state = NULL, ...)  # S3 method for class 'blocks' blockr_ser(x, blocks = NULL, ...)  # S3 method for class 'board_options' blockr_ser(x, options = NULL, ...)  # S3 method for class 'board_option' blockr_ser(x, option = NULL, ...)  # S3 method for class 'llm_model_option' blockr_ser(x, option = NULL, ...)  # S3 method for class 'board' blockr_ser(x, blocks = NULL, options = NULL, ...)  # S3 method for class 'link' blockr_ser(x, ...)  # S3 method for class 'links' blockr_ser(x, ...)  # S3 method for class 'stack' blockr_ser(x, ...)  # S3 method for class 'stacks' blockr_ser(x, ...)  blockr_deser(x, ...)  # S3 method for class 'list' blockr_deser(x, ...)  # S3 method for class 'block' blockr_deser(x, data, ...)  # S3 method for class 'blocks' blockr_deser(x, data, ...)  # S3 method for class 'board' blockr_deser(x, data, ...)  # S3 method for class 'link' blockr_deser(x, data, ...)  # S3 method for class 'links' blockr_deser(x, data, ...)  # S3 method for class 'stack' blockr_deser(x, data, ...)  # S3 method for class 'stacks' blockr_deser(x, data, ...)  # S3 method for class 'board_options' blockr_deser(x, data, ...)  # S3 method for class 'board_option' blockr_deser(x, data, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/blockr_ser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Serialization utilities — blockr_ser","text":"x Object (de)serialize ... Generic consistency state Object state (returned expr_server) blocks Block states (NULL defaults values ctor scope) options Board option values (NULL uses values provided x) option Board option value (NULL uses values provided x) data List valued data (converted JSON)","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/blockr_ser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Serialization utilities — blockr_ser","text":"Serialization helper function blockr_ser() returns lists, objects contain slots object payload, object contains class vector used blockr_deser() instantiate empty object class use S3 dispatch identify correct method , given content payload, can re-create original object.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/blockr_ser.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Serialization utilities — blockr_ser","text":"Helper functions blockr_ser() blockr_deser() implemented generics perform heavy lifting (de-)serialization: representing objects easy--serialize (nested) lists containing mostly strings objects hard/impossible truthfully re-create new sessions (environments).","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/blockr_ser.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Serialization utilities — blockr_ser","text":"","code":"blk <- new_dataset_block(\"iris\")  blockr_ser(blk) #> $object #> [1] \"dataset_block\" \"data_block\"    \"block\"         \"vctrs_vctr\"    #> [5] \"list\"          #>  #> $payload #> $payload$dataset #> [1] \"iris\" #>  #> $payload$package #> [1] \"datasets\" #>  #> $payload$name #> [1] \"Dataset block\" #>  #>  #> $constructor #> [1] \"new_dataset_block\" #>  #> $package #> [1] \"blockr.core\" #>  #> $version #> [1] \"0.1.1\" #>   all.equal(blk, blockr_deser(blockr_ser(blk)), check.environment = FALSE) #> [1] TRUE"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/board_blocks.html","id":null,"dir":"Reference","previous_headings":"","what":"Board utils — board_blocks","title":"Board utils — board_blocks","text":"set utility functions available querying manipulating board components (.e. blocks, links stacks). Functions retrieving modifying board options documented new_board_options().","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/board_blocks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Board utils — board_blocks","text":"","code":"board_blocks(x)  board_blocks(x) <- value  board_block_ids(x)  rm_blocks(x, rm)  board_links(x)  board_links(x) <- value  board_link_ids(x)  modify_board_links(x, add = NULL, rm = NULL, mod = NULL)  board_stacks(x)  board_stacks(x) <- value  board_stack_ids(x)  modify_board_stacks(x, add = NULL, rm = NULL, mod = NULL)  available_stack_blocks(   x,   stacks = board_stacks(x),   blocks = board_stack_ids(x) )"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/board_blocks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Board utils — board_blocks","text":"x Board value Replacement value rm Block/link/stack IDs remove add Links/stacks add mod Link/stacks modify blocks, stacks Sets blocks/stacks","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/board_blocks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Board utils — board_blocks","text":"Functions retrieving, well updating components (board_blocks()/board_links()/board_stacks() board_blocks<-()/board_links<-()/board_stacks<-()) return corresponding objects (.e. blocks, links stacks), ID getters (board_block_ids(), board_link_ids() board_stack_ids()) return character vectors, available_stack_blocks(). Convenience functions rm_blocks(), modify_board_links() modify_board_stacks() return updated board object.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/board_blocks.html","id":"blocks","dir":"Reference","previous_headings":"","what":"Blocks","title":"Board utils — board_blocks","text":"Board blocks can retrieved using board_blocks() updated corresponding replacement function board_blocks<-(). just current board IDs interest, board_block_ids() available short names(board_blocks(x)). order remove block(s) board, (generic) convenience function rm_blocks() exported, takes care (default implementation board) also updating links stacks accordingly. basic replacement function board_blocks<-() might fail validation updated board object inconsistent state results update (e.g. block referenced stack longer available).","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/board_blocks.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"Board utils — board_blocks","text":"Board links can retrieved using board_links() updated corresponding replacement function board_links<-(). links IDs interest, available board_link_ids(), short names(board_links(x)). (generic) convenience function kinds updates board links one available modify_board_links(). arguments add, rm mod, links can added, removed modified one go.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/board_blocks.html","id":"stacks","dir":"Reference","previous_headings":"","what":"Stacks","title":"Board utils — board_blocks","text":"Board stacks can retrieved using board_stacks() updated corresponding replacement function board_stacks<-(). stack IDs interest, available board_stack_ids(), short names(board_stacks(x)). (generic) convenience function update stacks available modify_board_stacks(), can add, remove modify stacks depending arguments passed add, rm mod. block IDs already associated stack (.e. \"free\" blocks) interest, available available_stack_blocks().","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/board_blocks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Board utils — board_blocks","text":"","code":"brd <- new_board(   c(      a = new_dataset_block(),      b = new_subset_block()   ),   list(from = \"a\", to = \"b\") )  board_blocks(brd) #> <blocks[2]> #>  #> a #>  <dataset_block<data_block<block>>> #>  Name: \"Dataset block\" #>  No data inputs #>  Initial block state: #>   $ dataset: chr(0) #>   $ package: chr \"datasets\" #>  Constructor: blockr.core::new_dataset_block() #>  #> b #>  <subset_block<transform_block<block>>> #>  Name: \"Subset block\" #>  Data inputs: \"data\" #>  Initial block state: #>   $ subset: chr \"\" #>   $ select: chr \"\" #>  Constructor: blockr.core::new_subset_block() board_block_ids(brd) #> [1] \"a\" \"b\"  board_links(brd) #> <links[1]> #> tabarded_lice  #> a -> b (data)  board_link_ids(brd) #> [1] \"tabarded_lice\"  board_stacks(brd) #> <stacks[0]> board_stack_ids(brd) #> character(0)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/board_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Board server — board_server","title":"Board server — board_server","text":"call board_server(), dispatched objects inheriting board, returns shiny::moduleServer(), containing necessary logic manipulate board components via UI. Extensibility currently available functionality provided form S3, board_server() implementation board sub-classes may provided, well via plugin architecture callback functions can used register additional observers.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/board_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Board server — board_server","text":"","code":"board_server(id, x, ...)  # S3 method for class 'board' board_server(id, x, plugins = list(), callbacks = list(), ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/board_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Board server — board_server","text":"id Parent namespace x Board ... Generic consistency plugins Board plugins modules callbacks Single (list ) callback function(s), called side-effects)","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/board_server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Board server — board_server","text":"board_server() implementation (default board base class) expected return shiny::moduleServer().","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/board_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Board UI — board_ui.board_options","title":"Board UI — board_ui.board_options","text":"counterpart board_server(), board_ui() responsible rendering UI board module. top-level entry point customizing board appearance functionality can overridden sub-classing boar object providing implementation sub-class. implementation expected handle UI plugins board components, including blocks, links stacks, may rely functionality generates UI components, block_ui() stack_ui(), well already available UI provided plugins . Additionally, toolbar_ui() responsible creating toolbar UI component several plugin UI components.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/board_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Board UI — board_ui.board_options","text":"","code":"# S3 method for class 'board_options' board_ui(id, x, ...)  board_ui(id, x, ...)  # S3 method for class 'board' board_ui(id, x, plugins = list(), ...)  # S3 method for class '`NULL`' board_ui(id, x, ...)  insert_block_ui(id, x, blocks = NULL, ...)  # S3 method for class 'board' insert_block_ui(id, x, blocks = NULL, ...)  remove_block_ui(id, x, blocks = NULL, ...)  # S3 method for class 'board' remove_block_ui(id, x, blocks = NULL, ...)  update_ui(x, session, ...)  # S3 method for class 'board' update_ui(x, session, ...)  toolbar_ui(id, x, plugins = list(), ...)  # S3 method for class 'board' toolbar_ui(id, x, plugins = list(), ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/board_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Board UI — board_ui.board_options","text":"id Namespace ID x Board ... Generic consistency plugins UI board plugins blocks (Additional) blocks (IDs) generate UI session Shiny session","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/board_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Board UI — board_ui.board_options","text":"board_ui() implementation expected return shiny::tag shiny::tagList() objects, toolbar_ui(), updater functions (insert_block_ui(), remove_block_ui() update_ui()) called side effects (includes UI updates shiny::insertUI(), shiny::removeUI()) return board object passed x invisibly.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/board_ui.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Board UI — board_ui.board_options","text":"Dynamic UI updates handled functions insert_block_ui() remove_block_ui() adding removing block-level UI elements board UI, whenever blocks added removed. lightly nondescript updated function update_ui() intended board-level UI updates, currently needed restoring saved state board option UI needs adjusted accordingly. update functions provided S3 generics implementations board can extended desired.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/chr_ply.html","id":null,"dir":"Reference","previous_headings":"","what":"Functional programming utilities — chr_ply","title":"Functional programming utilities — chr_ply","text":"set wrappers base::vapply() convenient defaults. Intended mainly internal use, available dependent packages wherever deemed convenient.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/chr_ply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functional programming utilities — chr_ply","text":"","code":"chr_ply(x, fun, ..., length = 1L, use_names = FALSE)  lgl_ply(x, fun, ..., length = 1L, use_names = FALSE)  int_ply(x, fun, ..., length = 1L, use_names = FALSE)  dbl_ply(x, fun, ..., length = 1L, use_names = FALSE)  chr_mply(..., length = 1L)  lgl_mply(..., length = 1L)  int_mply(..., length = 1L)  dbl_mply(..., length = 1L)  chr_xtr(x, i, ...)  lgl_xtr(x, i, ...)  int_xtr(x, i, ...)  dbl_xtr(x, i, ...)  lst_xtr(x, ...)  map(fun, ..., use_names = FALSE)  filter(fun, x, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/chr_ply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functional programming utilities — chr_ply","text":"x Object iterate fun Function apply component ... Forwarded fun length Expected result length use_names Name result using names(x) Index extract","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/chr_ply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functional programming utilities — chr_ply","text":"result call base::lapply(), base::vapply() base::Map().","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/edit_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Plugin module for editing board blocks — edit_block","title":"Plugin module for editing board blocks — edit_block","text":"Logic user experience editing block attributes block titles can customized enhanced providing alternate version plugin. default implementation handles block titles, (editable) block attributes introduced, corresponding UI logic can included . addition blocks titles, default implementation provides UI removing, well inserting blocks current one.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/edit_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plugin module for editing board blocks — edit_block","text":"","code":"edit_block(server = edit_block_server, ui = edit_block_ui)  edit_block_server(id, block_id, board, update, ...)  edit_block_ui(x, id, ...)  block_summary(x, data)  # S3 method for class 'block' block_summary(x, data)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/edit_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plugin module for editing board blocks — edit_block","text":"server, ui Server/UI plugin module id Namespace ID block_id Block ID board Reactive values object containing board information update Reactive value object initiate board updates ... Extra arguments passed parent scope x Block data Result data","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/edit_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plugin module for editing board blocks — edit_block","text":"plugin container inheriting edit_block returned edit_block(), UI component (e.g. edit_block_ui()) expected return shiny UI (.e. shiny::tagList()) server component (.e. edit_block_server()) expected return NULL.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/edit_stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Plugin module for editing board stacks — edit_stack","title":"Plugin module for editing board stacks — edit_stack","text":"Logic user experience editing stack attributes stack names can customized enhanced providing alternate version plugin. default implementation handles stack names, (editable) stack attributes introduced, corresponding UI logic can included . addition stack names, default implementation provides UI removing current stack.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/edit_stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plugin module for editing board stacks — edit_stack","text":"","code":"edit_stack(server = edit_stack_server, ui = edit_stack_ui)  edit_stack_server(id, stack_id, board, update, ...)  edit_stack_ui(id, x, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/edit_stack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plugin module for editing board stacks — edit_stack","text":"server, ui Server/UI plugin module id Namespace ID stack_id Stack ID board Reactive values object containing board information update Reactive value object initiate board updates ... Extra arguments passed parent scope x Stack","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/edit_stack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plugin module for editing board stacks — edit_stack","text":"plugin container inheriting edit_stack returned edit_stack(), UI component (e.g. edit_stack_ui()) expected return shiny UI (.e. shiny::tagList()) server component (.e. edit_stack_server()) expected return NULL.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/export_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Utilities for code export — export_code","title":"Utilities for code export — export_code","text":"facilitate means code export implemented default generate_code() plugin, utility performs much heavy lifting properly arrange scope block-level expressions.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/export_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utilities for code export — export_code","text":"","code":"export_code(expressions, board)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/export_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utilities for code export — export_code","text":"expressions Block expressions board Board object","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/export_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utilities for code export — export_code","text":"String containing properly arranged block expressions.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/generate_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Code generation plugin module — generate_code","title":"Code generation plugin module — generate_code","text":"code necessary reproducing data analysis set blockr can made available user. Several ways providing script code snippet conceivable currently implemented, modal copy--clipboard functionality. readily extensible, example offering download button, providing functionality generate_code module.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/generate_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Code generation plugin module — generate_code","text":"","code":"generate_code(server = generate_code_server, ui = generate_code_ui)  generate_code_server(id, board, ...)  generate_code_ui(id, board)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/generate_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Code generation plugin module — generate_code","text":"server, ui Server/UI plugin module id Namespace ID board Reactive values object ... Extra arguments passed parent scope","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/generate_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Code generation plugin module — generate_code","text":"plugin container inheriting generate_code returned generate_code(), UI component (e.g. generate_code_ui()) expected return shiny UI (.e. shiny::tagList()) server component (.e. generate_code_server()) expected return NULL.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/get_session.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny utilities — get_session","title":"Shiny utilities — get_session","text":"Utility functions shiny: get_session: See shiny::getDefaultReactiveDomain().","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/get_session.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny utilities — get_session","text":"","code":"get_session()  generate_plugin_args(board)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/get_session.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny utilities — get_session","text":"board board object","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/get_session.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny utilities — get_session","text":"Either NULL shiny session object.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/manage_blocks.html","id":null,"dir":"Reference","previous_headings":"","what":"Plugin module for managing board blocks — manage_blocks","title":"Plugin module for managing board blocks — manage_blocks","text":"Logic user experience adding/removing blocks board can customized enhanced providing alternate version plugin. default implementation provides modal-based UI simple shiny inputs drop-downs text fields.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/manage_blocks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plugin module for managing board blocks — manage_blocks","text":"","code":"manage_blocks(server = manage_blocks_server, ui = manage_blocks_ui)  manage_blocks_server(id, board, update, ...)  manage_blocks_ui(id, board)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/manage_blocks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plugin module for managing board blocks — manage_blocks","text":"server, ui Server/UI plugin module id Namespace ID board initial board object update Reactive value object initiate board updates ... Extra arguments passed parent scope","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/manage_blocks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plugin module for managing board blocks — manage_blocks","text":"plugin container inheriting manage_blocks returned manage_blocks(), UI component (e.g. manage_blocks_ui()) expected return shiny UI (.e. shiny::tagList()) server component (.e. manage_blocks_server()) expected return NULL.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/manage_blocks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plugin module for managing board blocks — manage_blocks","text":"Updates mediated via shiny::reactiveVal() object passed update, block updates communicated list entry blocks components add rm, add may NULL block object (block IDs may already exist), rm may NULL string (existing block IDs).","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/manage_links.html","id":null,"dir":"Reference","previous_headings":"","what":"Plugin module for managing board links — manage_links","title":"Plugin module for managing board links — manage_links","text":"Logic user experience adding new, removing modifying existing links /board can customized enhanced providing alternate version plugin. default implementation provides table-based UI, presented modal.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/manage_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plugin module for managing board links — manage_links","text":"","code":"manage_links(server = manage_links_server, ui = manage_links_ui)  manage_links_server(id, board, update, ...)  manage_links_ui(id, board)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/manage_links.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plugin module for managing board links — manage_links","text":"server, ui Server/UI plugin module id Namespace ID board initial board object update Reactive value object initiate board updates ... Extra arguments passed parent scope","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/manage_links.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plugin module for managing board links — manage_links","text":"plugin container inheriting manage_links returned manage_links(), UI component (e.g. manage_links_ui()) expected return shiny UI (.e. shiny::tagList()) server component (.e. manage_links_server()) expected return NULL.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/manage_links.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plugin module for managing board links — manage_links","text":"Updates mediated via shiny::reactiveVal() object passed update, link updates communicated list entry stacks components add, rm mod, add either NULL links object (link IDs may already exists), rm either NULL character vector (existing) link IDs, mod either NULL links object (link IDs must already exist).","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/manage_stacks.html","id":null,"dir":"Reference","previous_headings":"","what":"Plugin module for managing board stacks — manage_stacks","title":"Plugin module for managing board stacks — manage_stacks","text":"Logic user experience adding new, removing modifying existing stacks /board can customized enhanced providing alternate version plugin. default implementation provides table-based UI, presented modal.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/manage_stacks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plugin module for managing board stacks — manage_stacks","text":"","code":"manage_stacks(server = manage_stacks_server, ui = manage_stacks_ui)  manage_stacks_server(id, board, update, ...)  manage_stacks_ui(id, board)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/manage_stacks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plugin module for managing board stacks — manage_stacks","text":"server, ui Server/UI plugin module id Namespace ID board initial board object update Reactive value object initiate board updates ... Extra arguments passed parent scope","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/manage_stacks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plugin module for managing board stacks — manage_stacks","text":"plugin container inheriting manage_stacks returned manage_stacks(), UI component (e.g. manage_stacks_ui()) expected return shiny UI (.e. shiny::tagList()) server component (.e. manage_stacks_server()) expected return NULL.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/manage_stacks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plugin module for managing board stacks — manage_stacks","text":"Updates mediated via shiny::reactiveVal() object passed update, stack updates communicated list entry stacks components add, rm mod, add either NULL stacks object (stack IDs may already exists), rm either NULL character vector (existing) stack IDs, mod either NULL stacks object (stack IDs must already exist).","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Blocks — new_block","title":"Blocks — new_block","text":"Steps data analysis pipeline represented blocks. block combines data input user inputs produce output. order create block, implemented shiny module, require server function, function produces UI class vector.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Blocks — new_block","text":"","code":"new_block(   server,   ui,   class,   ctor,   ctor_pkg,   dat_valid = NULL,   allow_empty_state = FALSE,   name = NULL,   ... )  is_block(x)  as_block(x, ...)  blocks(...)  is_blocks(x)  as_blocks(x, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Blocks — new_block","text":"server function returning shiny::moduleServer() ui function single argument (ns) returning shiny.tag class Block subclass ctor String-valued constructor name function/frame number (mostly internal use defining constructors virtual classes) ctor_pkg String-valued package name passing string-valued constructor name NULL dat_valid (Optional) input data validator allow_empty_state Either TRUE, FALSE character vector state values may empty still moving forward block eval name Block name ... (metadata) attributes x object inheriting \"block\"","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Blocks — new_block","text":"new_block() as_block() return object inheriting block, is_block() returns boolean indicating whether object inherits block . Block vectors, created using blocks(), as_blocks(), combining multiple blocks using base::c() inherit frm blocks iss_block() returns boolean indicating whether object inherits blocks .","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_block.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Blocks — new_block","text":"block constructor may arguments, taken together define block state. good practice expose user-selectable arguments block (.e. everything excluding \"data\" input) block arguments block can fully initialized via constructor. default values required blocks can constructed via constructor calls without arguments. sensible , specific default values acceptable, way data dependent, defaults map \"empty\" input. example, block provides utils::head() functionality, one argument n reasonable default value 6L (line corresponding default S3 method implementation). hand, block performs base::merge() operation might expose argument, general purpose default value (depend data) possible. Therefore, new_merge_block() = character(). return value block constructor result call new_block() ... contained constructor signature general block arguments (e.g. name) available constructor.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_block.html","id":"server","dir":"Reference","previous_headings":"","what":"Server","title":"Blocks — new_block","text":"server function (passed server) expected function returns shiny::moduleServer(). function expected least argument id (string-valued), used module ID. arguments may used function signature, one \"data\" input. block implementing utils::head() example single extra argument data, block performs base::merge() requires two extra arguments, e.g. x y. Finally, variadic block, e.g. block implementing something like base::rbind(), needs accommodate arbitrary number inputs. achieved passing shiny::reactiveValues() object ...args thus variadic block needs ...args part server function signature. per-data input arguments passed shiny::reactive() shiny::reactiveVal() objects. server function may implement arbitrary shiny logic expected return list components expr state. expression corresponds R code necessary perform block task expected reactive quoted expression. contain user-chosen values user inputs placeholders data inputs (using names data inputs server function signature). expression base::merge() block created using base::bquote()   current_val() reactive evaluates current user selection columns. wrapped shiny::reactive() call current_val() can evaluated whenever current expression required. state component expected named list either reactive \"static\" values. cases, components state reactives, might make sense scenarios constructor arguments exposed via UI components fixed construction time. example dataset_block implementation constructor arguments dataset package, expose dataset UI element. means package fixed construction time. Nevertheless, package required state component, used re-creating blocks saved state. State component names required match block constructor arguments re-creating saved objects basically calls block constructor values obtained block state.","code":"bquote(   merge(x, y, by = .(cols)),   list(cols = current_val()) }"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_block.html","id":"ui","dir":"Reference","previous_headings":"","what":"UI","title":"Blocks — new_block","text":"Block UI generated using function passed ui new_block constructor. function required take single argument id shiny UI components namespaced nested within ID (.e. creating IDs shiny::NS(id, \"some_value\")). care taken properly initialize inputs constructor values. rule thumb, input elements exposed UI corresponding block constructor arguments blocks can created given initial state. Block UI limited displaying arranging user inputs set block arguments. outputs, use generics block_output() block_ui().","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_block.html","id":"sub-classing","dir":"Reference","previous_headings":"","what":"Sub-classing","title":"Blocks — new_block","text":"addition specific class block, core package uses virtual classes group together blocks similar behavior (e.g. transform_block) makes use inheritance structure S3 dispatch methods like block_output() block_ui(). pattern required encouraged.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_block.html","id":"initialization-evaluation","dir":"Reference","previous_headings":"","what":"Initialization/evaluation","title":"Blocks — new_block","text":"control block considered \"ready evaluation\" available via arguments dat_valid allow_empty_state. Data input validation can optionally performed passing predicate function arguments server function (including id) block expression evaluated long function throws error. conditions (messages warnings) may thrown caught displayed user interrupt evaluation. Errors safe caught well interrupt evaluation long block data input satisfy validation.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_block.html","id":"block-vectors","dir":"Reference","previous_headings":"","what":"Block vectors","title":"Blocks — new_block","text":"Multiple blocks can combined blocks object, container (ordered) set blocks. Block IDs handled blocks level ensure uniqueness.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Blocks — new_block","text":"","code":"new_identity_block <- function() {   new_transform_block(     function(id, data) {       moduleServer(         id,         function(input, output, session) {           list(             expr = reactive(quote(identity(data))),             state = list()           )         }       )     },     function(id) {       tagList()     },     class = \"identity_block\"   ) }  blk <- new_identity_block() is_block(blk) #> [1] TRUE  blks <- c(a = new_dataset_block(), b = new_subset_block())  is_block(blks) #> [1] FALSE is_blocks(blks) #> [1] TRUE  names(blks) #> [1] \"a\" \"b\"  tryCatch(   names(blks[\"a\"]) <- \"b\",   error = function(e) conditionMessage(e) ) #> [1] \"Replacing IDs `a` with `b` is not allowed.\""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_board.html","id":null,"dir":"Reference","previous_headings":"","what":"Board — new_board","title":"Board — new_board","text":"set blocks, optionally connected via links grouped stacks organized board object. Boards constructed using new_board() inheritance can tested is_board(), validation available (generic function) validate_board(). central data structure can extended adding attributes sub-classes. S3 dispatch used many places control UI looks feels using extension mechanism, UI aspects can customized user requirements. Several utilities available retrieving modifying block attributes (see board_blocks()).","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_board.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Board — new_board","text":"","code":"new_board(   blocks = list(),   links = list(),   stacks = list(),   options = default_board_options(),   ...,   class = character() )  validate_board(x)  is_board(x)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_board.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Board — new_board","text":"blocks Set blocks links Set links stacks Set stacks options Board-level user settings ... (metadata) attributes class Board sub-class x Board object","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_board.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Board — new_board","text":"board constructor new_board() returns board object, validator validate_board(), typically called side effects form errors. Inheritance checking is_board() returns scalar logical.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_board.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Board — new_board","text":"","code":"brd <- new_board(   c(      a = new_dataset_block(),      b = new_subset_block()   ),   list(from = \"a\", to = \"b\") )  is_board(brd) #> [1] TRUE"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_board_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Board options — new_board_option","title":"Board options — new_board_option","text":"User settings board level managed board_options object. can constructed via new_board_options() case set user options extended, constructor designed sub-classing mind. Consequently, associated validator validate_board_options() available S3 generic. Inheritance checking available is_board_options() coercion as_board_options().","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_board_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Board options — new_board_option","text":"","code":"new_board_option(   id,   default,   ui,   server = function(board, session) {  },   update_trigger = id,   transform = identity,   ctor = sys.parent(),   pkg = NULL,   ... )  is_board_option(x)  validate_board_option(x)  as_board_option(x, ...)  # S3 method for class 'board_option' as_board_option(x, ...)  board_option_id(x)  board_option_trigger(x)  board_option_default(x)  board_option_ui(x, id = NULL)  board_option_server(x, ...)  board_option_transform(x)  board_option_value(x, value = board_option_default(x))  # Default S3 method validate_board_option(x)  new_board_name_option(value = NULL, ...)  new_n_rows_option(value = blockr_option(\"n_rows\", 50L), ...)  new_page_size_option(value = blockr_option(\"page_size\", 5L), ...)  new_filter_rows_option(value = blockr_option(\"filter_rows\", FALSE), ...)  new_thematic_option(value = blockr_option(\"thematic\", NULL), ...)  new_dark_mode_option(value = blockr_option(\"dark_mode\", NULL), ...)  new_show_conditions_option(   value = blockr_option(\"show_conditions\", c(\"warning\", \"error\")),   ... )  need_llm_cfg_opts(enable)  new_llm_model_option(value = NULL, ...)  new_board_options(...)  default_board_options(...)  is_board_options(x)  as_board_options(x)  # S3 method for class 'board_options' as_board_options(x)  # S3 method for class 'board_option' as_board_options(x)  # S3 method for class 'list' as_board_options(x)  # S3 method for class 'board' as_board_options(x)  validate_board_options(x)  board_option_values(x)  get_board_option_value(opt, session = get_session())  set_board_option_value(opt, val, session = get_session())  get_board_option_or_default(   opt,   opts = default_board_options(),   session = get_session() )  get_board_option_or_null(opt, session = get_session())  get_board_option_values(   ...,   opts = default_board_options(),   if_not_found = c(\"error\", \"default\", \"null\"),   session = get_session() )"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_board_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Board options — new_board_option","text":"id Board option ID default Default value ui Option UI server (Optional) option server update_trigger Shiny input entry/entries trigger update transform (Optional) transform function ctor, pkg Constructor information (used serialization) ... Options passed individual arguments x Board options object value Option value enable Enable (.e. include) llm model option opt Option name session Shiny session val New value opts Board options if_not_found Behavior case option found","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_board_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Board options — new_board_option","text":"new_board_options() as_board_options() return board_options object, validator validate_board_options(), typically called side effects throwing errors validation pass. Inheritance checking is_board_options() returns scalar logical, board_option_values() returns named list option values.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_board_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Board options — new_board_option","text":"","code":"opt <- new_board_options(    new_board_name_option(),    new_page_size_option()  )  is_board_options(opt) #> [1] TRUE names(opt) #> [1] \"board_name\" \"page_size\"   opt[[\"page_size\"]] #> page_size: 5"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_data_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Data block constructors — new_data_block","title":"Data block constructors — new_data_block","text":"Data blocks typically data inputs represent root nodes analysis graphs. Intended initial steps pipeline, blocks responsible providing -stream blocks data.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_data_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data block constructors — new_data_block","text":"","code":"new_data_block(server, ui, class, ctor = sys.parent(), ...)  new_dataset_block(dataset = character(), package = \"datasets\", ...)  new_static_block(data, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_data_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data block constructors — new_data_block","text":"server function returning shiny::moduleServer() ui function single argument (ns) returning shiny.tag class Block subclass ctor String-valued constructor name function/frame number (mostly internal use defining constructors virtual classes) ... Forwarded new_data_block() new_block() dataset Selected dataset package Name R package containing datasets data Data (used directly block result)","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_data_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data block constructors — new_data_block","text":"blocks constructed via new_data_block() inherit data_block.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_data_block.html","id":"dataset-block","dir":"Reference","previous_headings":"","what":"Dataset block","title":"Data block constructors — new_data_block","text":"data block allows select dataset package, datasets package available R installations one packages \"recommended\" priority. source package can chosen time block instantiation can set R package, set candidate datasets computed. includes exported objects inherit data.frame.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_data_block.html","id":"static-block","dir":"Reference","previous_headings":"","what":"Static block","title":"Data block constructors — new_data_block","text":"Mainly useful testing examples, block simply returns data initialized. Serialization static blocks allowed exported code self-contained sense possible reproduce results script contains code static block.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_file_block.html","id":null,"dir":"Reference","previous_headings":"","what":"File block constructors — new_file_block","title":"File block constructors — new_file_block","text":"Similarly new_data_block(), blocks created via new_file_block() serve starting points analysis pipelines providing data -stream blocks. typically data inputs represent root nodes analysis graphs.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_file_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File block constructors — new_file_block","text":"","code":"new_file_block(server, ui, class, ctor = sys.parent(), ...)  new_filebrowser_block(   file_path = character(),   volumes = filebrowser_volumes(),   ... )  filebrowser_volumes(default = c(home = path.expand(\"~\")))  new_upload_block(...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_file_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File block constructors — new_file_block","text":"server function returning shiny::moduleServer() ui function single argument (ns) returning shiny.tag class Block subclass ctor String-valued constructor name function/frame number (mostly internal use defining constructors virtual classes) ... Forwarded new_file_block() new_block() file_path File path volumes Parent namespace default Default volumes specification (use blockr option \"volumes\" override)","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_file_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"File block constructors — new_file_block","text":"blocks constructed via new_file_block() inherit file_block.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_file_block.html","id":"file-browser-block","dir":"Reference","previous_headings":"","what":"File browser block","title":"File block constructors — new_file_block","text":"order make user data available blockr, block provides file- upload functionality via shiny::fileInput(). Given data provided way available life-time shiny session, exported code self-contained script containing code upload block run new session. Also, serialization upload blocks currently allowed full data included serialization.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_file_block.html","id":"upload-block","dir":"Reference","previous_headings":"","what":"Upload block","title":"File block constructors — new_file_block","text":"order make user data available blockr, block provides file- upload functionality via shiny::fileInput(). Given data provided way available life-time shiny session, exported code self-contained script containing code upload block run new session. Also, serialization upload blocks currently allowed full data included serialization.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_link.html","id":null,"dir":"Reference","previous_headings":"","what":"Board links — new_link","title":"Board links — new_link","text":"Two blocks can connected via (directed) link. means result one block passed (data) input next. Source destination identified attributes case polyadic receiving blocks, input attribute identified data inputs intended destination. principle, link object may extended via sub-classing passing attributes, properly tested far. addition unique IDs, links objects guaranteed consistent possible multiple links pointing target (combination input attributes). Furthermore, links behave like edges directed acyclic graph (DAG) cycles detected disallowed.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Board links — new_link","text":"","code":"new_link(from = \"\", to = \"\", input = \"\", ..., class = character())  is_link(x)  as_link(x)  links(...)  is_links(x)  as_links(x)  validate_links(x)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_link.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Board links — new_link","text":", Block ID(s) input Block argument ... Extensibility class (Optional) link sub-class x Links object","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_link.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Board links — new_link","text":"new_link()/as_link(), links()/as_links() return link links objects, respectively. Testing inheritance available is_link()/is_links() validation (links) performed validate_links(), returns input (x) throws error.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_link.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Board links — new_link","text":"links created via new_link() constructor vector links, container object links provided corresponding constructor links() exported package. Testing whether object inherits link (links) available via is_link() (is_links(), respectively). Coercion link (links) objects implemented as_link() (as_links(), respectively). Finally, links can validated calling validate_links().","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_link.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Board links — new_link","text":"","code":"lnks <- links(from = c(\"a\", \"b\"), to = c(\"b\", \"c\"), input = c(\"x\", \"y\")) is_links(lnks) #> [1] TRUE names(lnks) #> [1] \"secular_nauplius\" \"unbiased_tarsier\"  tryCatch(   c(lnks, new_link(\"a\", \"b\", \"x\")),   error = function(e) conditionMessage(e) ) #> [1] \"Block b has multiple identical inputs.\" tryCatch(   c(lnks, new_link(\"b\", \"a\")),   error = function(e) conditionMessage(e) ) #> [1] \"Links form a cycle.\"  lnks <- links(a = new_link(\"a\", \"b\"), b = new_link(\"b\", \"c\")) names(lnks) #> [1] \"a\" \"b\"  tryCatch(   c(lnks, a = new_link(\"a\", \"b\")),   error = function(e) conditionMessage(e) ) #> [1] \"Links IDs are required to be unique.\""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_parser_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Parser block constructors — new_parser_block","title":"Parser block constructors — new_parser_block","text":"Operating results blocks created via new_file_block(), parser blocks read (.e. \"parse\") file make contents available subsequent blocks analysis visualization.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_parser_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parser block constructors — new_parser_block","text":"","code":"new_parser_block(   server,   ui,   class,   ctor = sys.parent(),   dat_valid = is_file,   ... )  new_csv_block(sep = \",\", quote = \"\\\"\", ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_parser_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parser block constructors — new_parser_block","text":"server function returning shiny::moduleServer() ui function single argument (ns) returning shiny.tag class Block subclass ctor String-valued constructor name function/frame number (mostly internal use defining constructors virtual classes) dat_valid (Optional) input data validator ... Forwarded new_parser_block() new_block() sep, quote Forwarded utils::read.table()","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_parser_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parser block constructors — new_parser_block","text":"blocks constructed via new_parser_block() inherit parser_block.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_parser_block.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parser block constructors — new_parser_block","text":"using default validator parser block sub-class (.e. overriding dat_valid argument call new_parser_block()), data argument corresponding input file name must file order match naming conventions validator function.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_parser_block.html","id":"csv-block","dir":"Reference","previous_headings":"","what":"CSV block","title":"Parser block constructors — new_parser_block","text":"Files CSV format provided example block created via new_file_block() may parsed data.frame CSV blocks.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_plot_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot block constructors — new_plot_block","title":"Plot block constructors — new_plot_block","text":"Blocks data visualization using base R graphics can created via new_plot_block().","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_plot_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot block constructors — new_plot_block","text":"","code":"new_plot_block(server, ui, class, ctor = sys.parent(), ...)  new_scatter_block(x = character(), y = character(), ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_plot_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot block constructors — new_plot_block","text":"server function returning shiny::moduleServer() ui function single argument (ns) returning shiny.tag class Block subclass ctor String-valued constructor name function/frame number (mostly internal use defining constructors virtual classes) ... Forwarded new_plot_block() new_block() x, y Columns place respective axes","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_plot_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot block constructors — new_plot_block","text":"blocks constructed via new_plot_block() inherit plot_block.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_plot_block.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot block constructors — new_plot_block","text":"Due current block evaluation procedure, block evaluation separated block \"rendering\" (via  shiny::renderPlot()) integration base R graphics requires mechanism achieve decoupling. implemented adding plot attribute result block_eval(), generated grDevices::recordPlot() containing required information re-create plot later time. part block_output(), attribute retrieved passed grDevices::replayPlot(). Consequently, block inherits plot_block required support type decoupling.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_plot_block.html","id":"scatter-block","dir":"Reference","previous_headings":"","what":"Scatter block","title":"Plot block constructors — new_plot_block","text":"Mainly demonstration purposes, block draws scattter plot using base::plot(). current simplistic implementation, apart axis labels (fixed corresponding column names), plotting options available \"production\" application, sophisticated (set ) block(s) data visualization likely required.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_plugin.html","id":null,"dir":"Reference","previous_headings":"","what":"Board plugin — new_plugin","title":"Board plugin — new_plugin","text":"core mechanism extending customizing UX aspects board module \"plugin\" architecture. plugins inherit plugin sub-class assigned specific plugin. \"manage blocks\" plugin example class vector c(\"manage_blocks\", \"plugin\"). Sets plugins handled via wrapper class plugins. plugin needs server component, cases accompanied UI component optionally bundled validator function.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_plugin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Board plugin — new_plugin","text":"","code":"new_plugin(server, ui = NULL, validator = abort_not_null, class = character())  is_plugin(x)  abort_not_null(x)  as_plugin(x)  board_plugins(x, which = NULL)  plugins(...)  is_plugins(x)  as_plugins(x)  validate_plugins(x)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_plugin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Board plugin — new_plugin","text":"server, ui Server/UI plugin module validator Validator function validates server return values class Plugin subclass x Plugin object (Optional) character vectors plugins include ... Plugin objects","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_plugin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Board plugin — new_plugin","text":"Constructors new_plugin()/plugins() return plugin plugins objects, respectively, as_plugin()/as_plugins() validators validate_plugin()/validate_plugins(), typically called side effects throwing errors case validation failure. Inheritance checkers is_plugin()/is_plugins() return scalar logicals finally, convenience function board_plugins() returns plugins object known plugins (selected subset thereof).","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_plugin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Board plugin — new_plugin","text":"","code":"plg <- board_plugins(new_board())  is_plugins(plg) #> [1] TRUE names(plg) #> [1] \"preserve_board\" \"manage_blocks\"  \"manage_links\"   \"manage_stacks\"  #> [5] \"notify_user\"    \"generate_code\"  \"edit_block\"     \"edit_stack\"      plg[1:3] #> <plugins[3]> #> preserve_board: <preserve_board<plugin>> #> manage_blocks: <manage_blocks<plugin>> #> manage_links: <manage_links<plugin>>  is_plugin(plg[[\"preserve_board\"]]) #> [1] TRUE"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Stacks — new_stack","title":"Stacks — new_stack","text":"Multiple (related) blocks can grouped together stacks. grouping functional implications, rather organizational tool help users manage complex pipelines. Stack objects constitute set attributes, important blocks (character vector block IDs). stack may arbitrary name class can extended adding attributes, maybe something like color, coupled sub-classing. Stack container objects (stacks objects) can created stacks() as_stacks() inheritance can tested via is_stacks(). basic operations concatenation, subsetting sub-assignments available means base R generics.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stacks — new_stack","text":"","code":"new_stack(blocks = character(), name = \"Stack\", ..., class = character())  is_stack(x)  stack_blocks(x)  stack_blocks(x) <- value  stack_name(x, name)  stack_name(x) <- value  validate_stack(x)  as_stack(x)  stacks(...)  is_stacks(x)  as_stacks(x, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_stack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stacks — new_stack","text":"blocks Set blocks name Stack name ... Extensibility class (Optional) stack sub-class x Stack object value Replacement value","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_stack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stacks — new_stack","text":"Construction coercion via new_stack()/as_stack() stacks()/as_stacks() results stack stacks objects, respectively, inheritance testing via is_stack() is_stacks() returns scalar logicals. Attribute getters stack_name() stack_blocks() return scalar vector-valued character vectors setters stack_name()<- stack_blocks()<- return modified stack objects.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_stack.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stacks — new_stack","text":"Individual stacks can created using new_stack() as_stack() inheritance can tested is_stack(). Attributes can retrieved (modified) stack_blocks()/stack_blocks<-() stack_name()/stack_name<-(), validation available (generic) validate_stack().","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_stack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stacks — new_stack","text":"","code":"stk <- new_stack(letters[1:5], \"Alphabet 1\")  stack_blocks(stk) #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" stack_name(stk) #> [1] \"Alphabet 1\" stack_name(stk) <- \"Alphabet start\"  stks <- c(start = stk, cont = new_stack(letters[6:10], \"Alphabet cont.\")) names(stks) #> [1] \"start\" \"cont\"   tryCatch(   stack_blocks(stks[[2]]) <- letters[4:8],   error = function(e) conditionMessage(e) ) #> [1] \"Blocks cannot be in mutliple stacks at the same time.\""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_text_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Text block constructors — new_text_block","title":"Text block constructors — new_text_block","text":"text block produces (markdown styled) text, given (optional) data input.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_text_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Text block constructors — new_text_block","text":"","code":"new_text_block(server, ui, class, ctor = sys.parent(), ...)  new_glue_block(text = character(), ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_text_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Text block constructors — new_text_block","text":"server function returning shiny::moduleServer() ui function single argument (ns) returning shiny.tag class Block subclass ctor String-valued constructor name function/frame number (mostly internal use defining constructors virtual classes) ... Forwarded new_text_block() new_block() text String evaluated using glue::glue()","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_text_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Text block constructors — new_text_block","text":"blocks constructed via new_text_block() inherit text_block.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_text_block.html","id":"glue-block","dir":"Reference","previous_headings":"","what":"Glue block","title":"Text block constructors — new_text_block","text":"Using glue::glue(), block allows evaluation text string context datasets produce (markdown formatted) text block result.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_transform_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform block constructors — new_transform_block","title":"Transform block constructors — new_transform_block","text":"Many data transformations provided blocks constructed via new_transform_block(), including examples single data.frame transformed another (e.g. subset_block), two data.frames combined (e.g. merge_block rbind_block).","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_transform_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform block constructors — new_transform_block","text":"","code":"new_transform_block(server, ui, class, ctor = sys.parent(), ...)  new_fixed_block(expr, ...)  new_head_block(n = 6L, direction = c(\"head\", \"tail\"), ...)  new_merge_block(by = character(), all_x = FALSE, all_y = FALSE, ...)  new_rbind_block(...)  new_subset_block(subset = \"\", select = \"\", ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_transform_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform block constructors — new_transform_block","text":"server function returning shiny::moduleServer() ui function single argument (ns) returning shiny.tag class Block subclass ctor String-valued constructor name function/frame number (mostly internal use defining constructors virtual classes) ... Forwarded new_transform_block() new_block() expr Quoted expression n Number rows direction Either \"head\" \"tail\" Column(s) tp join all_x, all_y Join type, see base::merge() subset, select Expressions (passed strings)","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_transform_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform block constructors — new_transform_block","text":"blocks constructed via new_transform_block() inherit transform_block.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_transform_block.html","id":"fixed-block","dir":"Reference","previous_headings":"","what":"Fixed block","title":"Transform block constructors — new_transform_block","text":"Mainly useful testing examples, block applies fixed transformation data input. UI elements exposed transformation consequently parametrized. quoted expression passed expr expected refer input data data.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_transform_block.html","id":"head-block","dir":"Reference","previous_headings":"","what":"Head block","title":"Transform block constructors — new_transform_block","text":"Row-subsetting first last n rows data.frame (provided utils::head() utils::tail()) implemented head_block. example block takes single data.frame input produces single data.frame output.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_transform_block.html","id":"merge-block","dir":"Reference","previous_headings":"","what":"Merge block","title":"Transform block constructors — new_transform_block","text":"Joining together two data.frames, based set index columns, using base::merge() available merge_block. Depending values passed all_x/all_y result correspond \"inner\", \"outer\", \"lfet\" \"right\" join. See base::merge() details. block class serves example transform block takes exactly two data inputs x y produce single data.frame output.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_transform_block.html","id":"row-bind-block","dir":"Reference","previous_headings":"","what":"Row-bind block","title":"Transform block constructors — new_transform_block","text":"Row-wise concatenation arbitrary number data.frames, performed base::rbind() available rbind_block. mainly serves example variadic block via \"special\" ...args block data argument.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/new_transform_block.html","id":"subset-block","dir":"Reference","previous_headings":"","what":"Subset block","title":"Transform block constructors — new_transform_block","text":"block allows perform row column subsetting data.frame objects via base::subset(). Using non-standard evaluation, strings passed subset/select arguments entered via shiny UI turned language objects base::parse().","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/notify_user.html","id":null,"dir":"Reference","previous_headings":"","what":"User notification plugin module — notify_user","title":"User notification plugin module — notify_user","text":"evaluation cycle block, user notifications may generated inform case issues errors warnings. notifications provided way display can controlled adapted specific needs. default notify_user plugin simply displays notifications via shiny::showNotification(), ID management order able clear longer relevant notifications via shiny::removeNotification().","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/notify_user.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"User notification plugin module — notify_user","text":"","code":"notify_user(server = notify_user_server, ui = notify_user_ui)  notify_user_server(id, board, ...)  notify_user_ui(id, board)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/notify_user.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"User notification plugin module — notify_user","text":"server, ui Server/UI plugin module id Namespace ID board Reactive values object ... Extra arguments passed parent scope","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/notify_user.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"User notification plugin module — notify_user","text":"plugin container inheriting notify_user returned notify_user(), UI component (e.g. notify_user_ui()) expected return shiny UI (.e. shiny::tagList(); available) server component (.e. notify_user_server()) expected return shiny::reactiveVal() shiny::reactive() evaluates list containing notifications per block notification type (.e. \"message\", \"warning\" \"error\").","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/preserve_board.html","id":null,"dir":"Reference","previous_headings":"","what":"Serialization plugin module — preserve_board","title":"Serialization plugin module — preserve_board","text":"Board state can preserved serializing contained objects restored via de-serialization. mechanism can used power features save/restore (via download, implemented default preserve_board plugin), refined user experience conceivable terms undo/redo functionality (automatic) saving board state. enhancements can implemented third-party preserve_board module.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/preserve_board.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serialization plugin module — preserve_board","text":"","code":"preserve_board(server = preserve_board_server, ui = preserve_board_ui)  preserve_board_server(id, board, ...)  restore_board(x, new, result, ..., session = get_session())  preserve_board_ui(id, board)  serialize_board(x, blocks, ..., session = get_session())"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/preserve_board.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Serialization plugin module — preserve_board","text":"server, ui Server/UI plugin module id Namespace ID board initial board object ... Extra arguments passed parent scope x current board object new Serialized (list-based) representation new board result shiny::reactiveVal() hold new board object session Shiny session blocks Block state reactive values","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/preserve_board.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Serialization plugin module — preserve_board","text":"plugin container inheriting preserve_board returned preserve_board(), UI component (e.g. preserve_board_ui()) expected return shiny UI (.e. shiny::tagList()) server component (.e. preserve_board_server()) expected return shiny::reactiveVal() shiny::reactive() evaluates NULL board object.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/rand_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Random IDs — rand_names","title":"Random IDs — rand_names","text":"Randomly generated unique IDs used throughout package, created rand_names(). random strings required may clash set existing values, can guaranteed passing old_names. blockr_option() rand_id can set swap function responsible ID generation.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/rand_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random IDs — rand_names","text":"","code":"rand_names(   old_names = character(0L),   n = 1L,   max_tries = 100L,   id_fun = blockr_option(\"rand_id\", NULL) )  adjective_animal(n)  sample_letters(n)  to_sentence_case(x, replace = character(), with = character())  id_to_sentence_case(x)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/rand_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random IDs — rand_names","text":"old_names Disallowed IDs n Number IDs generate max_tries Max number attempts create IDs intersect old_names id_fun function single argument n generates random IDs. value NULL defaults ids::adjective_animal() available sample_letters otherwise. x Character vector transform replace, Mapped base::gsub()","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/rand_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random IDs — rand_names","text":"character vector length n entry contains length characters (among chars start/end prefix/suffix), guaranteed unique present among values passed old_names.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/rand_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random IDs — rand_names","text":"","code":"rand_names() #> [1] \"even_finwhale\" rand_names(n = 5L) #> [1] \"operatic_moth\"    \"electric_cowbird\" \"forlorn_crab\"     \"obese_angora\"     #> [5] \"dozy_pig\"         rand_names(id_fun = sample_letters) #> [1] \"afbsnayo\""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/register_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Block registry — register_block","title":"Block registry — register_block","text":"Listing blocks available via block registry, associates block constructor metadata order provide browsable block directory. Every constructor identified unique ID (uid), default generated class vector (first element). class vector provided registration, object instantiated (calling constructor arguments ctor ctor_pkg ) derive information. Block constructors therefore callable without block- specific arguments.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/register_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block registry — register_block","text":"","code":"register_block(   ctor,   name,   description,   classes = NULL,   uid = NULL,   category = \"uncategorized\",   package = NULL,   overwrite = FALSE )  list_blocks()  unregister_blocks(uid = list_blocks())  register_blocks(...)  available_blocks()  create_block(id, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/register_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block registry — register_block","text":"ctor Block constructor name, description Metadata describing block classes Block classes uid Unique ID registry entry category Useful sort blocks topics. specified, blocks uncategorized. package Package constructor defined (NULL) overwrite Overwrite existing entry ... Forwarded register_block() id Block ID reported list_blocks()","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/register_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Block registry — register_block","text":"register_block() register_blocks() invoked side effects return block_registry_entry object(s) invisibly, unregister_blocks() returns NULL (invisibly). Listing via list_blocks() returns character vector list block_registry_entry object(s) available_blocks(). Finally, create_block() returns newly instantiated block object.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/register_block.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Block registry — register_block","text":"Due current requirements serialization/deserialization, keep track constructor used block instantiation. works reliable whenever block constructor exported function package function guaranteed available new session (give package installed appropriate version). possible register block passing \"local\" function ctor, may introduce failure modes less obvious (example constructor calls another function defined within scope session). therefore encouraged rely exported function constructors. can also passed strings together value package, corresponding function can easily retrieved session. Blocks can registered (.e. added registry) via register_block() scalar-valued arguments register_blocks(), arguments may vector-valued, de-registration (removal) handled via unregister_blocks(). listing available blocks can created list_blocks(), return registry IDs available_blocks(), provides set (named) block_registry_entry objects. Finally, block construction via registry ID available create_block().","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/register_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Block registry — register_block","text":"","code":"blks <- list_blocks() register_block(\"new_dataset_block\", \"Test\", \"Registry test\",                uid = \"test_block\", package = \"blockr.core\") new <- setdiff(list_blocks(), blks) unregister_blocks(new) setequal(list_blocks(), blks) #> [1] TRUE"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/serve.html","id":null,"dir":"Reference","previous_headings":"","what":"Serve object — serve","title":"Serve object — serve","text":"Intended entry point start shiny app, generic function serve() can dispatched either single block (mainly previewing purposes block development) entire board","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/serve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serve object — serve","text":"","code":"serve(x, ...)  # S3 method for class 'block' serve(x, id = \"block\", ..., data = list())  # S3 method for class 'board' serve(x, id = rand_names(), plugins = board_plugins(x), ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/serve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Serve object — serve","text":"x Object ... Generic consistency id Board namespace ID data Data inputs plugins Board plugins","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/serve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Serve object — serve","text":"generic serve() expected return result call shiny::shinyApp().","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/serve.html","id":"examples-in-shinylive","dir":"Reference","previous_headings":"","what":"Examples in Shinylive","title":"Serve object — serve","text":"example-1 Open Shinylive example-2 Open Shinylive","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/set_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Miscellaneous utilities — pkg_name","title":"Miscellaneous utilities — pkg_name","text":"Several internal utility functions exported convencience case dependent packages can make use functionality.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/set_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Miscellaneous utilities — pkg_name","text":"","code":"pkg_name(env = parent.frame())  pkg_version(pkg = parent.frame())  pkg_file(..., pkg = parent.frame())  pkg_avail(...)  set_names(object = nm, nm)  paste_enum(x, sep = \", \", conj = \" and \", quotes = \"`\")  coal(..., fail_null = TRUE)  reval(x)  reval_if(x)  last(x)  unlst(x, recursive = FALSE, use_names = FALSE)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/set_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Miscellaneous utilities — pkg_name","text":"env environment resolved package name pkg string.valued package name environment passed pkg_name() ... Set objects iterate object, nm See stats::setNames() x Character vector base::paste() sep, conj Separation strings last last positions quotes Quotes wrap entry x fail_null Error non-null objects present recursive, use_names See base::unlist()","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/set_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Miscellaneous utilities — pkg_name","text":"Function set_names() returns names object, paste_enum() string, coal() first non-null object unlst() performs action base::unlist() differing defaults.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/stack_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Stack UI — stack_ui","title":"Stack UI — stack_ui","text":"Several generics exported order integrate stack UI board UI. stack_ui() dispatched board (default implementation) individual stack objects. renders stacks bootstrap accordion items (using bslib::accordion()). different way displaying stacks integrating board desired, can implemented introducing board subclass providing stack_ui() method subclass. Inserting stacks (removing stacks ) board available insert_stack_ui()/remove_stack_ui() blocks /stacks via add_block_to_stack()/remove_block_from_stack(). S3 generics implementations board alternative implementation may provided board sub-classes.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/stack_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stack UI — stack_ui","text":"","code":"stack_ui(id, x, ...)  # S3 method for class 'board' stack_ui(id, x, stacks = NULL, edit_ui = NULL, ...)  # S3 method for class 'stack' stack_ui(id, x, edit_ui = NULL, ...)  insert_stack_ui(id, x, board, edit_ui = NULL, session = get_session(), ...)  # S3 method for class 'board' insert_stack_ui(id, x, board, edit_ui = NULL, session = get_session(), ...)  remove_stack_ui(id, board, session = get_session(), ...)  # S3 method for class 'board' remove_stack_ui(id, board, session = get_session(), ...)  add_block_to_stack(board, block_id, stack_id, session = get_session(), ...)  # S3 method for class 'board' add_block_to_stack(board, block_id, stack_id, session = get_session(), ...)  remove_block_from_stack(   board,   block_id,   board_id,   session = get_session(),   ... )  # S3 method for class 'board' remove_block_from_stack(   board,   block_id,   board_id,   session = get_session(),   ... )"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/stack_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stack UI — stack_ui","text":"id Parent namespace x Object ... Generic consistency stacks (Additional) stacks (IDs) generate UI edit_ui Stack edit plugin board Board object session Shiny session block_id, stack_id, board_id Block/stack/board IDs","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/stack_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stack UI — stack_ui","text":"UI set via stack_ui() expected return shiny::tag() shiny::tagList() objects stack/block insertion/removal functions (/board/stack objects) called side-effects. insert_stack_ui()/remove_stack_ui add_block_to_stack()/remove_block_from_stack() return NULL invisibly former call shiny::insertUI()/shiny::removeUI() latter modify DOM via shiny::session custom messages.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/topo_sort.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph utils — is_acyclic.board","title":"Graph utils — is_acyclic.board","text":"Block dependencies represented DAGs graph utility functions topo_sort() is_acyclic() used create topological ordering (implemented DFS) blocks check cycles. adjacency matrix corresponding board available .matrix().","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/topo_sort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph utils — is_acyclic.board","text":"","code":"# S3 method for class 'board' is_acyclic(x)  # S3 method for class 'links' is_acyclic(x)  topo_sort(x)  is_acyclic(x)  # S3 method for class 'matrix' is_acyclic(x)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/topo_sort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph utils — is_acyclic.board","text":"x Object","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/topo_sort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph utils — is_acyclic.board","text":"Topological ordering via topo_sort() returns character vector sorted node IDs generic function is_acyclic() expected return scalar logical value.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/topo_sort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph utils — is_acyclic.board","text":"","code":"brd <- new_board(   c(      a = new_dataset_block(),      b = new_dataset_block(),      c = new_scatter_block(),      d = new_subset_block()   ),   list(from = c(\"a\", \"d\"), to = c(\"d\", \"c\")) )  as.matrix(brd) #>   a b c d #> a 0 0 0 1 #> b 0 0 0 0 #> c 0 0 0 0 #> d 0 0 1 0 topo_sort(brd) #> [1] \"b\" \"a\" \"d\" \"c\" is_acyclic(brd) #> [1] TRUE"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/write_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Logging — write_log","title":"Logging — write_log","text":"Internally used infrastructure emitting log messages exported, hoping packages depend , use thereby logging carried consistently terms presentation output device. log messages associated (ordered) level (\"fatal\", \"error\", \"warn\", \"info\", \"debug\" \"trace\") compared currently set value (available get_log_level()) output generated message level greater equal currently set value.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/write_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logging — write_log","text":"","code":"write_log(..., level = \"info\", envir = parent.frame(), asis = FALSE)  log_fatal(..., envir = parent.frame())  log_error(..., envir = parent.frame())  log_warn(..., envir = parent.frame())  log_info(..., envir = parent.frame())  log_debug(..., envir = parent.frame())  log_trace(..., envir = parent.frame())  as_log_level(level)  get_log_level()  cnd_logger(msg, level)  cat_logger(msg, level)"},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/write_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logging — write_log","text":"... Concatenated paste0(..., \"\\n\") level Logging level (possible values \"fatal\", \"error\", \"warn\", \"info\", \"debug\" \"trace\" envir Environment logging call originated asis Flag disable re-wrapping text terminal width msg Message (string)","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/reference/write_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logging — write_log","text":"Logging function write_log(), wrappers log_*() loggers provided cnd_logger()/cat_logger() return NULL invisibly called side effect emitting message. Helpers as_log_level() get_log_level() return scalar-valued ordered factor.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/news/index.html","id":"blockrcore-011","dir":"Changelog","previous_headings":"","what":"blockr.core 0.1.1","title":"blockr.core 0.1.1","text":"Add Block-level notifications via (optional) expr server return value component cond. Export get_board_option_value() make available current option settings via session$UserData. Introduce (optional) dependency thematic auto-style plots. Export toolbar_ui() takes case “core” toolbar UI component. Utility functions chr_ply() related, well miscellaneous utilities set_names(), coal(), etc. now exported use dependent packages. Export export_code() make easier third-party generate_code() plugin implementations. Use evaluate::evaluate() capture plots. Add new_fixed_block() applying fixed (.e. non-paramtetrized) transformation data input. Board server callbacks invoked additional argument session. Export assertion utilities is_string(), is_count(), etc.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.core/news/index.html","id":"blockrcore-010","dir":"Changelog","previous_headings":"","what":"blockr.core 0.1.0","title":"blockr.core 0.1.0","text":"CRAN release: 2025-05-20 Initial CRAN submission","code":""}]
